//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.42
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OrgImport {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("OrgImportDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OrgImportDS : System.Data.DataSet {
        
        private BASETTSDataTable tableBASETTS;
        
        private DEPTADataTable tableDEPTA;
        
        private JOBDataTable tableJOB;
        
        private BASEDataTable tableBASE;
        
        private DeptDataTable tableDept;
        
        private PosDataTable tablePos;
        
        private EmpDataTable tableEmp;
        
        private RoleDataTable tableRole;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrgImportDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OrgImportDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BASETTS"] != null)) {
                    base.Tables.Add(new BASETTSDataTable(ds.Tables["BASETTS"]));
                }
                if ((ds.Tables["DEPTA"] != null)) {
                    base.Tables.Add(new DEPTADataTable(ds.Tables["DEPTA"]));
                }
                if ((ds.Tables["JOB"] != null)) {
                    base.Tables.Add(new JOBDataTable(ds.Tables["JOB"]));
                }
                if ((ds.Tables["BASE"] != null)) {
                    base.Tables.Add(new BASEDataTable(ds.Tables["BASE"]));
                }
                if ((ds.Tables["Dept"] != null)) {
                    base.Tables.Add(new DeptDataTable(ds.Tables["Dept"]));
                }
                if ((ds.Tables["Pos"] != null)) {
                    base.Tables.Add(new PosDataTable(ds.Tables["Pos"]));
                }
                if ((ds.Tables["Emp"] != null)) {
                    base.Tables.Add(new EmpDataTable(ds.Tables["Emp"]));
                }
                if ((ds.Tables["Role"] != null)) {
                    base.Tables.Add(new RoleDataTable(ds.Tables["Role"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BASETTSDataTable BASETTS {
            get {
                return this.tableBASETTS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DEPTADataTable DEPTA {
            get {
                return this.tableDEPTA;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JOBDataTable JOB {
            get {
                return this.tableJOB;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BASEDataTable BASE {
            get {
                return this.tableBASE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeptDataTable Dept {
            get {
                return this.tableDept;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PosDataTable Pos {
            get {
                return this.tablePos;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpDataTable Emp {
            get {
                return this.tableEmp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RoleDataTable Role {
            get {
                return this.tableRole;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            OrgImportDS cln = ((OrgImportDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BASETTS"] != null)) {
                    base.Tables.Add(new BASETTSDataTable(ds.Tables["BASETTS"]));
                }
                if ((ds.Tables["DEPTA"] != null)) {
                    base.Tables.Add(new DEPTADataTable(ds.Tables["DEPTA"]));
                }
                if ((ds.Tables["JOB"] != null)) {
                    base.Tables.Add(new JOBDataTable(ds.Tables["JOB"]));
                }
                if ((ds.Tables["BASE"] != null)) {
                    base.Tables.Add(new BASEDataTable(ds.Tables["BASE"]));
                }
                if ((ds.Tables["Dept"] != null)) {
                    base.Tables.Add(new DeptDataTable(ds.Tables["Dept"]));
                }
                if ((ds.Tables["Pos"] != null)) {
                    base.Tables.Add(new PosDataTable(ds.Tables["Pos"]));
                }
                if ((ds.Tables["Emp"] != null)) {
                    base.Tables.Add(new EmpDataTable(ds.Tables["Emp"]));
                }
                if ((ds.Tables["Role"] != null)) {
                    base.Tables.Add(new RoleDataTable(ds.Tables["Role"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBASETTS = ((BASETTSDataTable)(base.Tables["BASETTS"]));
            if ((initTable == true)) {
                if ((this.tableBASETTS != null)) {
                    this.tableBASETTS.InitVars();
                }
            }
            this.tableDEPTA = ((DEPTADataTable)(base.Tables["DEPTA"]));
            if ((initTable == true)) {
                if ((this.tableDEPTA != null)) {
                    this.tableDEPTA.InitVars();
                }
            }
            this.tableJOB = ((JOBDataTable)(base.Tables["JOB"]));
            if ((initTable == true)) {
                if ((this.tableJOB != null)) {
                    this.tableJOB.InitVars();
                }
            }
            this.tableBASE = ((BASEDataTable)(base.Tables["BASE"]));
            if ((initTable == true)) {
                if ((this.tableBASE != null)) {
                    this.tableBASE.InitVars();
                }
            }
            this.tableDept = ((DeptDataTable)(base.Tables["Dept"]));
            if ((initTable == true)) {
                if ((this.tableDept != null)) {
                    this.tableDept.InitVars();
                }
            }
            this.tablePos = ((PosDataTable)(base.Tables["Pos"]));
            if ((initTable == true)) {
                if ((this.tablePos != null)) {
                    this.tablePos.InitVars();
                }
            }
            this.tableEmp = ((EmpDataTable)(base.Tables["Emp"]));
            if ((initTable == true)) {
                if ((this.tableEmp != null)) {
                    this.tableEmp.InitVars();
                }
            }
            this.tableRole = ((RoleDataTable)(base.Tables["Role"]));
            if ((initTable == true)) {
                if ((this.tableRole != null)) {
                    this.tableRole.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OrgImportDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OrgImportDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBASETTS = new BASETTSDataTable();
            base.Tables.Add(this.tableBASETTS);
            this.tableDEPTA = new DEPTADataTable();
            base.Tables.Add(this.tableDEPTA);
            this.tableJOB = new JOBDataTable();
            base.Tables.Add(this.tableJOB);
            this.tableBASE = new BASEDataTable();
            base.Tables.Add(this.tableBASE);
            this.tableDept = new DeptDataTable();
            base.Tables.Add(this.tableDept);
            this.tablePos = new PosDataTable();
            base.Tables.Add(this.tablePos);
            this.tableEmp = new EmpDataTable();
            base.Tables.Add(this.tableEmp);
            this.tableRole = new RoleDataTable();
            base.Tables.Add(this.tableRole);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBASETTS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDEPTA() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJOB() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBASE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDept() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePos() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRole() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            OrgImportDS ds = new OrgImportDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BASETTSRowChangeEventHandler(object sender, BASETTSRowChangeEvent e);
        
        public delegate void DEPTARowChangeEventHandler(object sender, DEPTARowChangeEvent e);
        
        public delegate void JOBRowChangeEventHandler(object sender, JOBRowChangeEvent e);
        
        public delegate void BASERowChangeEventHandler(object sender, BASERowChangeEvent e);
        
        public delegate void DeptRowChangeEventHandler(object sender, DeptRowChangeEvent e);
        
        public delegate void PosRowChangeEventHandler(object sender, PosRowChangeEvent e);
        
        public delegate void EmpRowChangeEventHandler(object sender, EmpRowChangeEvent e);
        
        public delegate void RoleRowChangeEventHandler(object sender, RoleRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BASETTSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNobr;
            
            private System.Data.DataColumn columnadate;
            
            private System.Data.DataColumn columnddate;
            
            private System.Data.DataColumn columndept;
            
            private System.Data.DataColumn columndepts;
            
            private System.Data.DataColumn columnjob;
            
            private System.Data.DataColumn columnjobl;
            
            private System.Data.DataColumn columnmang;
            
            private System.Data.DataColumn columnjobs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASETTSDataTable() {
                this.TableName = "BASETTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BASETTSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BASETTSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NobrColumn {
                get {
                    return this.columnNobr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn adateColumn {
                get {
                    return this.columnadate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ddateColumn {
                get {
                    return this.columnddate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deptColumn {
                get {
                    return this.columndept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deptsColumn {
                get {
                    return this.columndepts;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn jobColumn {
                get {
                    return this.columnjob;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn joblColumn {
                get {
                    return this.columnjobl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn mangColumn {
                get {
                    return this.columnmang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn jobsColumn {
                get {
                    return this.columnjobs;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASETTSRow this[int index] {
                get {
                    return ((BASETTSRow)(this.Rows[index]));
                }
            }
            
            public event BASETTSRowChangeEventHandler BASETTSRowChanging;
            
            public event BASETTSRowChangeEventHandler BASETTSRowChanged;
            
            public event BASETTSRowChangeEventHandler BASETTSRowDeleting;
            
            public event BASETTSRowChangeEventHandler BASETTSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBASETTSRow(BASETTSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASETTSRow AddBASETTSRow(string Nobr, System.DateTime adate, System.DateTime ddate, string dept, string depts, string job, string jobl, bool mang, string jobs) {
                BASETTSRow rowBASETTSRow = ((BASETTSRow)(this.NewRow()));
                rowBASETTSRow.ItemArray = new object[] {
                        Nobr,
                        adate,
                        ddate,
                        dept,
                        depts,
                        job,
                        jobl,
                        mang,
                        jobs};
                this.Rows.Add(rowBASETTSRow);
                return rowBASETTSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BASETTSDataTable cln = ((BASETTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BASETTSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNobr = base.Columns["Nobr"];
                this.columnadate = base.Columns["adate"];
                this.columnddate = base.Columns["ddate"];
                this.columndept = base.Columns["dept"];
                this.columndepts = base.Columns["depts"];
                this.columnjob = base.Columns["job"];
                this.columnjobl = base.Columns["jobl"];
                this.columnmang = base.Columns["mang"];
                this.columnjobs = base.Columns["jobs"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNobr = new System.Data.DataColumn("Nobr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNobr);
                this.columnadate = new System.Data.DataColumn("adate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnadate);
                this.columnddate = new System.Data.DataColumn("ddate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnddate);
                this.columndept = new System.Data.DataColumn("dept", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndept);
                this.columndepts = new System.Data.DataColumn("depts", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndepts);
                this.columnjob = new System.Data.DataColumn("job", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob);
                this.columnjobl = new System.Data.DataColumn("jobl", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjobl);
                this.columnmang = new System.Data.DataColumn("mang", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmang);
                this.columnjobs = new System.Data.DataColumn("jobs", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjobs);
                this.columnNobr.AllowDBNull = false;
                this.columnNobr.MaxLength = 10;
                this.columndept.MaxLength = 10;
                this.columndepts.MaxLength = 10;
                this.columnjob.MaxLength = 4;
                this.columnjobl.MaxLength = 4;
                this.columnjobs.MaxLength = 2;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASETTSRow NewBASETTSRow() {
                return ((BASETTSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BASETTSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BASETTSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BASETTSRowChanged != null)) {
                    this.BASETTSRowChanged(this, new BASETTSRowChangeEvent(((BASETTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BASETTSRowChanging != null)) {
                    this.BASETTSRowChanging(this, new BASETTSRowChangeEvent(((BASETTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BASETTSRowDeleted != null)) {
                    this.BASETTSRowDeleted(this, new BASETTSRowChangeEvent(((BASETTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BASETTSRowDeleting != null)) {
                    this.BASETTSRowDeleting(this, new BASETTSRowChangeEvent(((BASETTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBASETTSRow(BASETTSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BASETTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DEPTADataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDEPT_GROUP;
            
            private System.Data.DataColumn columnd_no;
            
            private System.Data.DataColumn columnd_name;
            
            private System.Data.DataColumn columnkey_date;
            
            private System.Data.DataColumn columnkey_man;
            
            private System.Data.DataColumn columnold_dept;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTADataTable() {
                this.TableName = "DEPTA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DEPTADataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DEPTADataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DEPT_GROUPColumn {
                get {
                    return this.columnDEPT_GROUP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn d_noColumn {
                get {
                    return this.columnd_no;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn d_nameColumn {
                get {
                    return this.columnd_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn key_dateColumn {
                get {
                    return this.columnkey_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn key_manColumn {
                get {
                    return this.columnkey_man;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn old_deptColumn {
                get {
                    return this.columnold_dept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTARow this[int index] {
                get {
                    return ((DEPTARow)(this.Rows[index]));
                }
            }
            
            public event DEPTARowChangeEventHandler DEPTARowChanging;
            
            public event DEPTARowChangeEventHandler DEPTARowChanged;
            
            public event DEPTARowChangeEventHandler DEPTARowDeleting;
            
            public event DEPTARowChangeEventHandler DEPTARowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDEPTARow(DEPTARow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTARow AddDEPTARow(string DEPT_GROUP, string d_no, string d_name, System.DateTime key_date, string key_man, string old_dept) {
                DEPTARow rowDEPTARow = ((DEPTARow)(this.NewRow()));
                rowDEPTARow.ItemArray = new object[] {
                        DEPT_GROUP,
                        d_no,
                        d_name,
                        key_date,
                        key_man,
                        old_dept};
                this.Rows.Add(rowDEPTARow);
                return rowDEPTARow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DEPTADataTable cln = ((DEPTADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DEPTADataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDEPT_GROUP = base.Columns["DEPT_GROUP"];
                this.columnd_no = base.Columns["d_no"];
                this.columnd_name = base.Columns["d_name"];
                this.columnkey_date = base.Columns["key_date"];
                this.columnkey_man = base.Columns["key_man"];
                this.columnold_dept = base.Columns["old_dept"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDEPT_GROUP = new System.Data.DataColumn("DEPT_GROUP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPT_GROUP);
                this.columnd_no = new System.Data.DataColumn("d_no", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnd_no);
                this.columnd_name = new System.Data.DataColumn("d_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnd_name);
                this.columnkey_date = new System.Data.DataColumn("key_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_date);
                this.columnkey_man = new System.Data.DataColumn("key_man", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_man);
                this.columnold_dept = new System.Data.DataColumn("old_dept", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_dept);
                this.columnDEPT_GROUP.MaxLength = 10;
                this.columnd_no.AllowDBNull = false;
                this.columnd_no.MaxLength = 10;
                this.columnd_name.AllowDBNull = false;
                this.columnd_name.MaxLength = 24;
                this.columnkey_man.MaxLength = 8;
                this.columnold_dept.MaxLength = 6;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTARow NewDEPTARow() {
                return ((DEPTARow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DEPTARow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DEPTARow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DEPTARowChanged != null)) {
                    this.DEPTARowChanged(this, new DEPTARowChangeEvent(((DEPTARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DEPTARowChanging != null)) {
                    this.DEPTARowChanging(this, new DEPTARowChangeEvent(((DEPTARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DEPTARowDeleted != null)) {
                    this.DEPTARowDeleted(this, new DEPTARowChangeEvent(((DEPTARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DEPTARowDeleting != null)) {
                    this.DEPTARowDeleting(this, new DEPTARowChangeEvent(((DEPTARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDEPTARow(DEPTARow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DEPTADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JOBDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnjob;
            
            private System.Data.DataColumn columnjob_name;
            
            private System.Data.DataColumn columnkey_date;
            
            private System.Data.DataColumn columnkey_man;
            
            private System.Data.DataColumn columnjob_tree;
            
            private System.Data.DataColumn columnJOB_LEAR;
            
            private System.Data.DataColumn columnwork_type;
            
            private System.Data.DataColumn columnadate;
            
            private System.Data.DataColumn columnddate;
            
            private System.Data.DataColumn columnjob_ename;
            
            private System.Data.DataColumn columnjobsal;
            
            private System.Data.DataColumn columndeptcate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JOBDataTable() {
                this.TableName = "JOB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JOBDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JOBDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn jobColumn {
                get {
                    return this.columnjob;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn job_nameColumn {
                get {
                    return this.columnjob_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn key_dateColumn {
                get {
                    return this.columnkey_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn key_manColumn {
                get {
                    return this.columnkey_man;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn job_treeColumn {
                get {
                    return this.columnjob_tree;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JOB_LEARColumn {
                get {
                    return this.columnJOB_LEAR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn work_typeColumn {
                get {
                    return this.columnwork_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn adateColumn {
                get {
                    return this.columnadate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ddateColumn {
                get {
                    return this.columnddate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn job_enameColumn {
                get {
                    return this.columnjob_ename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn jobsalColumn {
                get {
                    return this.columnjobsal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deptcateColumn {
                get {
                    return this.columndeptcate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JOBRow this[int index] {
                get {
                    return ((JOBRow)(this.Rows[index]));
                }
            }
            
            public event JOBRowChangeEventHandler JOBRowChanging;
            
            public event JOBRowChangeEventHandler JOBRowChanged;
            
            public event JOBRowChangeEventHandler JOBRowDeleting;
            
            public event JOBRowChangeEventHandler JOBRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJOBRow(JOBRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JOBRow AddJOBRow(string job, string job_name, System.DateTime key_date, string key_man, string job_tree, string JOB_LEAR, string work_type, System.DateTime adate, System.DateTime ddate, string job_ename, int jobsal, string deptcate) {
                JOBRow rowJOBRow = ((JOBRow)(this.NewRow()));
                rowJOBRow.ItemArray = new object[] {
                        job,
                        job_name,
                        key_date,
                        key_man,
                        job_tree,
                        JOB_LEAR,
                        work_type,
                        adate,
                        ddate,
                        job_ename,
                        jobsal,
                        deptcate};
                this.Rows.Add(rowJOBRow);
                return rowJOBRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                JOBDataTable cln = ((JOBDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new JOBDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnjob = base.Columns["job"];
                this.columnjob_name = base.Columns["job_name"];
                this.columnkey_date = base.Columns["key_date"];
                this.columnkey_man = base.Columns["key_man"];
                this.columnjob_tree = base.Columns["job_tree"];
                this.columnJOB_LEAR = base.Columns["JOB_LEAR"];
                this.columnwork_type = base.Columns["work_type"];
                this.columnadate = base.Columns["adate"];
                this.columnddate = base.Columns["ddate"];
                this.columnjob_ename = base.Columns["job_ename"];
                this.columnjobsal = base.Columns["jobsal"];
                this.columndeptcate = base.Columns["deptcate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnjob = new System.Data.DataColumn("job", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob);
                this.columnjob_name = new System.Data.DataColumn("job_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob_name);
                this.columnkey_date = new System.Data.DataColumn("key_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_date);
                this.columnkey_man = new System.Data.DataColumn("key_man", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_man);
                this.columnjob_tree = new System.Data.DataColumn("job_tree", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob_tree);
                this.columnJOB_LEAR = new System.Data.DataColumn("JOB_LEAR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJOB_LEAR);
                this.columnwork_type = new System.Data.DataColumn("work_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnwork_type);
                this.columnadate = new System.Data.DataColumn("adate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnadate);
                this.columnddate = new System.Data.DataColumn("ddate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnddate);
                this.columnjob_ename = new System.Data.DataColumn("job_ename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjob_ename);
                this.columnjobsal = new System.Data.DataColumn("jobsal", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnjobsal);
                this.columndeptcate = new System.Data.DataColumn("deptcate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptcate);
                this.columnjob.AllowDBNull = false;
                this.columnjob.MaxLength = 4;
                this.columnjob_name.AllowDBNull = false;
                this.columnjob_name.MaxLength = 16;
                this.columnkey_date.AllowDBNull = false;
                this.columnkey_man.AllowDBNull = false;
                this.columnkey_man.MaxLength = 8;
                this.columnjob_tree.AllowDBNull = false;
                this.columnjob_tree.MaxLength = 1;
                this.columnJOB_LEAR.MaxLength = 4;
                this.columnwork_type.MaxLength = 1;
                this.columnjob_ename.MaxLength = 100;
                this.columndeptcate.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JOBRow NewJOBRow() {
                return ((JOBRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new JOBRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(JOBRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JOBRowChanged != null)) {
                    this.JOBRowChanged(this, new JOBRowChangeEvent(((JOBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JOBRowChanging != null)) {
                    this.JOBRowChanging(this, new JOBRowChangeEvent(((JOBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JOBRowDeleted != null)) {
                    this.JOBRowDeleted(this, new JOBRowChangeEvent(((JOBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JOBRowDeleting != null)) {
                    this.JOBRowDeleting(this, new JOBRowChangeEvent(((JOBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJOBRow(JOBRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JOBDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BASEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNobr;
            
            private System.Data.DataColumn columnname_c;
            
            private System.Data.DataColumn columnname_e;
            
            private System.Data.DataColumn columnsex;
            
            private System.Data.DataColumn columnbirdt;
            
            private System.Data.DataColumn columnaddr1;
            
            private System.Data.DataColumn columnaddr2;
            
            private System.Data.DataColumn columntel1;
            
            private System.Data.DataColumn columntel2;
            
            private System.Data.DataColumn columnbbcall;
            
            private System.Data.DataColumn columnemail;
            
            private System.Data.DataColumn columngsm;
            
            private System.Data.DataColumn columnidno;
            
            private System.Data.DataColumn columncont_man;
            
            private System.Data.DataColumn columncont_tel;
            
            private System.Data.DataColumn columncont_gsm;
            
            private System.Data.DataColumn columncont_man2;
            
            private System.Data.DataColumn columncont_tel2;
            
            private System.Data.DataColumn columncont_gsm2;
            
            private System.Data.DataColumn columnblood;
            
            private System.Data.DataColumn columnpassword;
            
            private System.Data.DataColumn columnpostcode1;
            
            private System.Data.DataColumn columnpostcode2;
            
            private System.Data.DataColumn columnbank_code;
            
            private System.Data.DataColumn columnbankno;
            
            private System.Data.DataColumn columnaccount_no;
            
            private System.Data.DataColumn columnmarry;
            
            private System.Data.DataColumn columncountry;
            
            private System.Data.DataColumn columncount_ma;
            
            private System.Data.DataColumn columnarmy;
            
            private System.Data.DataColumn columnpro_man1;
            
            private System.Data.DataColumn columnpro_addr1;
            
            private System.Data.DataColumn columnpro_id1;
            
            private System.Data.DataColumn columnpro_tel1;
            
            private System.Data.DataColumn columnpro_man2;
            
            private System.Data.DataColumn columnpro_addr2;
            
            private System.Data.DataColumn columnpro_id2;
            
            private System.Data.DataColumn columnpro_tel2;
            
            private System.Data.DataColumn columnarmy_type;
            
            private System.Data.DataColumn columnn_Nobr;
            
            private System.Data.DataColumn columnnobr_b;
            
            private System.Data.DataColumn columnprovince;
            
            private System.Data.DataColumn columnborn_addr;
            
            private System.Data.DataColumn columntaxcnt;
            
            private System.Data.DataColumn columnkey_man;
            
            private System.Data.DataColumn columnkey_date;
            
            private System.Data.DataColumn columnid_type;
            
            private System.Data.DataColumn columntaxno;
            
            private System.Data.DataColumn columnnolateamt;
            
            private System.Data.DataColumn columnpretax;
            
            private System.Data.DataColumn columnIN_JOB;
            
            private System.Data.DataColumn columnTAXMAST;
            
            private System.Data.DataColumn columnCOUNT_PA;
            
            private System.Data.DataColumn columnBASCD;
            
            private System.Data.DataColumn columnCHOLD_NOBR;
            
            private System.Data.DataColumn columnmark;
            
            private System.Data.DataColumn columnan_mang;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASEDataTable() {
                this.TableName = "BASE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BASEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BASEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NobrColumn {
                get {
                    return this.columnNobr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn name_cColumn {
                get {
                    return this.columnname_c;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn name_eColumn {
                get {
                    return this.columnname_e;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn birdtColumn {
                get {
                    return this.columnbirdt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addr1Column {
                get {
                    return this.columnaddr1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addr2Column {
                get {
                    return this.columnaddr2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tel1Column {
                get {
                    return this.columntel1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tel2Column {
                get {
                    return this.columntel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bbcallColumn {
                get {
                    return this.columnbbcall;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn gsmColumn {
                get {
                    return this.columngsm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idnoColumn {
                get {
                    return this.columnidno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_manColumn {
                get {
                    return this.columncont_man;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_telColumn {
                get {
                    return this.columncont_tel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_gsmColumn {
                get {
                    return this.columncont_gsm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_man2Column {
                get {
                    return this.columncont_man2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_tel2Column {
                get {
                    return this.columncont_tel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_gsm2Column {
                get {
                    return this.columncont_gsm2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bloodColumn {
                get {
                    return this.columnblood;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn postcode1Column {
                get {
                    return this.columnpostcode1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn postcode2Column {
                get {
                    return this.columnpostcode2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bank_codeColumn {
                get {
                    return this.columnbank_code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn banknoColumn {
                get {
                    return this.columnbankno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn account_noColumn {
                get {
                    return this.columnaccount_no;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn marryColumn {
                get {
                    return this.columnmarry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countryColumn {
                get {
                    return this.columncountry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn count_maColumn {
                get {
                    return this.columncount_ma;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn armyColumn {
                get {
                    return this.columnarmy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_man1Column {
                get {
                    return this.columnpro_man1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_addr1Column {
                get {
                    return this.columnpro_addr1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_id1Column {
                get {
                    return this.columnpro_id1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_tel1Column {
                get {
                    return this.columnpro_tel1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_man2Column {
                get {
                    return this.columnpro_man2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_addr2Column {
                get {
                    return this.columnpro_addr2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_id2Column {
                get {
                    return this.columnpro_id2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pro_tel2Column {
                get {
                    return this.columnpro_tel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn army_typeColumn {
                get {
                    return this.columnarmy_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn n_NobrColumn {
                get {
                    return this.columnn_Nobr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nobr_bColumn {
                get {
                    return this.columnnobr_b;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn provinceColumn {
                get {
                    return this.columnprovince;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn born_addrColumn {
                get {
                    return this.columnborn_addr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcntColumn {
                get {
                    return this.columntaxcnt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn key_manColumn {
                get {
                    return this.columnkey_man;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn key_dateColumn {
                get {
                    return this.columnkey_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn id_typeColumn {
                get {
                    return this.columnid_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxnoColumn {
                get {
                    return this.columntaxno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nolateamtColumn {
                get {
                    return this.columnnolateamt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pretaxColumn {
                get {
                    return this.columnpretax;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IN_JOBColumn {
                get {
                    return this.columnIN_JOB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TAXMASTColumn {
                get {
                    return this.columnTAXMAST;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COUNT_PAColumn {
                get {
                    return this.columnCOUNT_PA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BASCDColumn {
                get {
                    return this.columnBASCD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CHOLD_NOBRColumn {
                get {
                    return this.columnCHOLD_NOBR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn markColumn {
                get {
                    return this.columnmark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn an_mangColumn {
                get {
                    return this.columnan_mang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASERow this[int index] {
                get {
                    return ((BASERow)(this.Rows[index]));
                }
            }
            
            public event BASERowChangeEventHandler BASERowChanging;
            
            public event BASERowChangeEventHandler BASERowChanged;
            
            public event BASERowChangeEventHandler BASERowDeleting;
            
            public event BASERowChangeEventHandler BASERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBASERow(BASERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASERow AddBASERow(
                        string Nobr, 
                        string name_c, 
                        string name_e, 
                        string sex, 
                        System.DateTime birdt, 
                        string addr1, 
                        string addr2, 
                        string tel1, 
                        string tel2, 
                        string bbcall, 
                        string email, 
                        string gsm, 
                        string idno, 
                        string cont_man, 
                        string cont_tel, 
                        string cont_gsm, 
                        string cont_man2, 
                        string cont_tel2, 
                        string cont_gsm2, 
                        string blood, 
                        string password, 
                        string postcode1, 
                        string postcode2, 
                        string bank_code, 
                        string bankno, 
                        string account_no, 
                        string marry, 
                        string country, 
                        bool count_ma, 
                        string army, 
                        string pro_man1, 
                        string pro_addr1, 
                        string pro_id1, 
                        string pro_tel1, 
                        string pro_man2, 
                        string pro_addr2, 
                        string pro_id2, 
                        string pro_tel2, 
                        string army_type, 
                        string n_Nobr, 
                        string nobr_b, 
                        string province, 
                        string born_addr, 
                        decimal taxcnt, 
                        string key_man, 
                        System.DateTime key_date, 
                        string id_type, 
                        string taxno, 
                        bool nolateamt, 
                        decimal pretax, 
                        string IN_JOB, 
                        bool TAXMAST, 
                        bool COUNT_PA, 
                        string BASCD, 
                        string CHOLD_NOBR, 
                        bool mark, 
                        bool an_mang) {
                BASERow rowBASERow = ((BASERow)(this.NewRow()));
                rowBASERow.ItemArray = new object[] {
                        Nobr,
                        name_c,
                        name_e,
                        sex,
                        birdt,
                        addr1,
                        addr2,
                        tel1,
                        tel2,
                        bbcall,
                        email,
                        gsm,
                        idno,
                        cont_man,
                        cont_tel,
                        cont_gsm,
                        cont_man2,
                        cont_tel2,
                        cont_gsm2,
                        blood,
                        password,
                        postcode1,
                        postcode2,
                        bank_code,
                        bankno,
                        account_no,
                        marry,
                        country,
                        count_ma,
                        army,
                        pro_man1,
                        pro_addr1,
                        pro_id1,
                        pro_tel1,
                        pro_man2,
                        pro_addr2,
                        pro_id2,
                        pro_tel2,
                        army_type,
                        n_Nobr,
                        nobr_b,
                        province,
                        born_addr,
                        taxcnt,
                        key_man,
                        key_date,
                        id_type,
                        taxno,
                        nolateamt,
                        pretax,
                        IN_JOB,
                        TAXMAST,
                        COUNT_PA,
                        BASCD,
                        CHOLD_NOBR,
                        mark,
                        an_mang};
                this.Rows.Add(rowBASERow);
                return rowBASERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BASEDataTable cln = ((BASEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BASEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNobr = base.Columns["Nobr"];
                this.columnname_c = base.Columns["name_c"];
                this.columnname_e = base.Columns["name_e"];
                this.columnsex = base.Columns["sex"];
                this.columnbirdt = base.Columns["birdt"];
                this.columnaddr1 = base.Columns["addr1"];
                this.columnaddr2 = base.Columns["addr2"];
                this.columntel1 = base.Columns["tel1"];
                this.columntel2 = base.Columns["tel2"];
                this.columnbbcall = base.Columns["bbcall"];
                this.columnemail = base.Columns["email"];
                this.columngsm = base.Columns["gsm"];
                this.columnidno = base.Columns["idno"];
                this.columncont_man = base.Columns["cont_man"];
                this.columncont_tel = base.Columns["cont_tel"];
                this.columncont_gsm = base.Columns["cont_gsm"];
                this.columncont_man2 = base.Columns["cont_man2"];
                this.columncont_tel2 = base.Columns["cont_tel2"];
                this.columncont_gsm2 = base.Columns["cont_gsm2"];
                this.columnblood = base.Columns["blood"];
                this.columnpassword = base.Columns["password"];
                this.columnpostcode1 = base.Columns["postcode1"];
                this.columnpostcode2 = base.Columns["postcode2"];
                this.columnbank_code = base.Columns["bank_code"];
                this.columnbankno = base.Columns["bankno"];
                this.columnaccount_no = base.Columns["account_no"];
                this.columnmarry = base.Columns["marry"];
                this.columncountry = base.Columns["country"];
                this.columncount_ma = base.Columns["count_ma"];
                this.columnarmy = base.Columns["army"];
                this.columnpro_man1 = base.Columns["pro_man1"];
                this.columnpro_addr1 = base.Columns["pro_addr1"];
                this.columnpro_id1 = base.Columns["pro_id1"];
                this.columnpro_tel1 = base.Columns["pro_tel1"];
                this.columnpro_man2 = base.Columns["pro_man2"];
                this.columnpro_addr2 = base.Columns["pro_addr2"];
                this.columnpro_id2 = base.Columns["pro_id2"];
                this.columnpro_tel2 = base.Columns["pro_tel2"];
                this.columnarmy_type = base.Columns["army_type"];
                this.columnn_Nobr = base.Columns["n_Nobr"];
                this.columnnobr_b = base.Columns["nobr_b"];
                this.columnprovince = base.Columns["province"];
                this.columnborn_addr = base.Columns["born_addr"];
                this.columntaxcnt = base.Columns["taxcnt"];
                this.columnkey_man = base.Columns["key_man"];
                this.columnkey_date = base.Columns["key_date"];
                this.columnid_type = base.Columns["id_type"];
                this.columntaxno = base.Columns["taxno"];
                this.columnnolateamt = base.Columns["nolateamt"];
                this.columnpretax = base.Columns["pretax"];
                this.columnIN_JOB = base.Columns["IN_JOB"];
                this.columnTAXMAST = base.Columns["TAXMAST"];
                this.columnCOUNT_PA = base.Columns["COUNT_PA"];
                this.columnBASCD = base.Columns["BASCD"];
                this.columnCHOLD_NOBR = base.Columns["CHOLD_NOBR"];
                this.columnmark = base.Columns["mark"];
                this.columnan_mang = base.Columns["an_mang"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNobr = new System.Data.DataColumn("Nobr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNobr);
                this.columnname_c = new System.Data.DataColumn("name_c", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname_c);
                this.columnname_e = new System.Data.DataColumn("name_e", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname_e);
                this.columnsex = new System.Data.DataColumn("sex", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.columnbirdt = new System.Data.DataColumn("birdt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbirdt);
                this.columnaddr1 = new System.Data.DataColumn("addr1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr1);
                this.columnaddr2 = new System.Data.DataColumn("addr2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr2);
                this.columntel1 = new System.Data.DataColumn("tel1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntel1);
                this.columntel2 = new System.Data.DataColumn("tel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntel2);
                this.columnbbcall = new System.Data.DataColumn("bbcall", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbbcall);
                this.columnemail = new System.Data.DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columngsm = new System.Data.DataColumn("gsm", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngsm);
                this.columnidno = new System.Data.DataColumn("idno", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidno);
                this.columncont_man = new System.Data.DataColumn("cont_man", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_man);
                this.columncont_tel = new System.Data.DataColumn("cont_tel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_tel);
                this.columncont_gsm = new System.Data.DataColumn("cont_gsm", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_gsm);
                this.columncont_man2 = new System.Data.DataColumn("cont_man2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_man2);
                this.columncont_tel2 = new System.Data.DataColumn("cont_tel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_tel2);
                this.columncont_gsm2 = new System.Data.DataColumn("cont_gsm2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_gsm2);
                this.columnblood = new System.Data.DataColumn("blood", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnblood);
                this.columnpassword = new System.Data.DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpassword);
                this.columnpostcode1 = new System.Data.DataColumn("postcode1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpostcode1);
                this.columnpostcode2 = new System.Data.DataColumn("postcode2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpostcode2);
                this.columnbank_code = new System.Data.DataColumn("bank_code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank_code);
                this.columnbankno = new System.Data.DataColumn("bankno", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbankno);
                this.columnaccount_no = new System.Data.DataColumn("account_no", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_no);
                this.columnmarry = new System.Data.DataColumn("marry", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarry);
                this.columncountry = new System.Data.DataColumn("country", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncountry);
                this.columncount_ma = new System.Data.DataColumn("count_ma", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncount_ma);
                this.columnarmy = new System.Data.DataColumn("army", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarmy);
                this.columnpro_man1 = new System.Data.DataColumn("pro_man1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_man1);
                this.columnpro_addr1 = new System.Data.DataColumn("pro_addr1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_addr1);
                this.columnpro_id1 = new System.Data.DataColumn("pro_id1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_id1);
                this.columnpro_tel1 = new System.Data.DataColumn("pro_tel1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_tel1);
                this.columnpro_man2 = new System.Data.DataColumn("pro_man2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_man2);
                this.columnpro_addr2 = new System.Data.DataColumn("pro_addr2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_addr2);
                this.columnpro_id2 = new System.Data.DataColumn("pro_id2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_id2);
                this.columnpro_tel2 = new System.Data.DataColumn("pro_tel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpro_tel2);
                this.columnarmy_type = new System.Data.DataColumn("army_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarmy_type);
                this.columnn_Nobr = new System.Data.DataColumn("n_Nobr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnn_Nobr);
                this.columnnobr_b = new System.Data.DataColumn("nobr_b", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnobr_b);
                this.columnprovince = new System.Data.DataColumn("province", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprovince);
                this.columnborn_addr = new System.Data.DataColumn("born_addr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnborn_addr);
                this.columntaxcnt = new System.Data.DataColumn("taxcnt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcnt);
                this.columnkey_man = new System.Data.DataColumn("key_man", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_man);
                this.columnkey_date = new System.Data.DataColumn("key_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkey_date);
                this.columnid_type = new System.Data.DataColumn("id_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_type);
                this.columntaxno = new System.Data.DataColumn("taxno", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxno);
                this.columnnolateamt = new System.Data.DataColumn("nolateamt", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnolateamt);
                this.columnpretax = new System.Data.DataColumn("pretax", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpretax);
                this.columnIN_JOB = new System.Data.DataColumn("IN_JOB", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIN_JOB);
                this.columnTAXMAST = new System.Data.DataColumn("TAXMAST", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXMAST);
                this.columnCOUNT_PA = new System.Data.DataColumn("COUNT_PA", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNT_PA);
                this.columnBASCD = new System.Data.DataColumn("BASCD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASCD);
                this.columnCHOLD_NOBR = new System.Data.DataColumn("CHOLD_NOBR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHOLD_NOBR);
                this.columnmark = new System.Data.DataColumn("mark", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmark);
                this.columnan_mang = new System.Data.DataColumn("an_mang", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnan_mang);
                this.columnNobr.AllowDBNull = false;
                this.columnNobr.MaxLength = 10;
                this.columnname_c.AllowDBNull = false;
                this.columnname_c.MaxLength = 10;
                this.columnname_e.AllowDBNull = false;
                this.columnname_e.MaxLength = 30;
                this.columnsex.AllowDBNull = false;
                this.columnsex.MaxLength = 1;
                this.columnbirdt.AllowDBNull = false;
                this.columnaddr1.AllowDBNull = false;
                this.columnaddr1.MaxLength = 60;
                this.columnaddr2.AllowDBNull = false;
                this.columnaddr2.MaxLength = 60;
                this.columntel1.AllowDBNull = false;
                this.columntel1.MaxLength = 20;
                this.columntel2.AllowDBNull = false;
                this.columntel2.MaxLength = 20;
                this.columnbbcall.AllowDBNull = false;
                this.columnbbcall.MaxLength = 15;
                this.columnemail.AllowDBNull = false;
                this.columnemail.MaxLength = 30;
                this.columngsm.AllowDBNull = false;
                this.columngsm.MaxLength = 15;
                this.columnidno.AllowDBNull = false;
                this.columnidno.MaxLength = 10;
                this.columncont_man.AllowDBNull = false;
                this.columncont_man.MaxLength = 10;
                this.columncont_tel.AllowDBNull = false;
                this.columncont_tel.MaxLength = 12;
                this.columncont_gsm.AllowDBNull = false;
                this.columncont_gsm.MaxLength = 12;
                this.columncont_man2.AllowDBNull = false;
                this.columncont_man2.MaxLength = 10;
                this.columncont_tel2.AllowDBNull = false;
                this.columncont_tel2.MaxLength = 12;
                this.columncont_gsm2.AllowDBNull = false;
                this.columncont_gsm2.MaxLength = 12;
                this.columnblood.AllowDBNull = false;
                this.columnblood.MaxLength = 2;
                this.columnpassword.AllowDBNull = false;
                this.columnpassword.MaxLength = 8;
                this.columnpostcode1.AllowDBNull = false;
                this.columnpostcode1.MaxLength = 6;
                this.columnpostcode2.AllowDBNull = false;
                this.columnpostcode2.MaxLength = 6;
                this.columnbank_code.AllowDBNull = false;
                this.columnbank_code.MaxLength = 1;
                this.columnbankno.AllowDBNull = false;
                this.columnbankno.MaxLength = 14;
                this.columnaccount_no.AllowDBNull = false;
                this.columnaccount_no.MaxLength = 14;
                this.columnmarry.AllowDBNull = false;
                this.columnmarry.MaxLength = 4;
                this.columncountry.AllowDBNull = false;
                this.columncountry.MaxLength = 15;
                this.columncount_ma.AllowDBNull = false;
                this.columnarmy.AllowDBNull = false;
                this.columnarmy.MaxLength = 4;
                this.columnpro_man1.AllowDBNull = false;
                this.columnpro_man1.MaxLength = 10;
                this.columnpro_addr1.AllowDBNull = false;
                this.columnpro_addr1.MaxLength = 60;
                this.columnpro_id1.AllowDBNull = false;
                this.columnpro_id1.MaxLength = 10;
                this.columnpro_tel1.AllowDBNull = false;
                this.columnpro_tel1.MaxLength = 20;
                this.columnpro_man2.AllowDBNull = false;
                this.columnpro_man2.MaxLength = 10;
                this.columnpro_addr2.AllowDBNull = false;
                this.columnpro_addr2.MaxLength = 60;
                this.columnpro_id2.AllowDBNull = false;
                this.columnpro_id2.MaxLength = 10;
                this.columnpro_tel2.AllowDBNull = false;
                this.columnpro_tel2.MaxLength = 20;
                this.columnarmy_type.AllowDBNull = false;
                this.columnarmy_type.MaxLength = 20;
                this.columnn_Nobr.AllowDBNull = false;
                this.columnn_Nobr.MaxLength = 10;
                this.columnnobr_b.AllowDBNull = false;
                this.columnnobr_b.MaxLength = 6;
                this.columnprovince.AllowDBNull = false;
                this.columnprovince.MaxLength = 10;
                this.columnborn_addr.AllowDBNull = false;
                this.columnborn_addr.MaxLength = 10;
                this.columntaxcnt.AllowDBNull = false;
                this.columnkey_man.AllowDBNull = false;
                this.columnkey_man.MaxLength = 8;
                this.columnkey_date.AllowDBNull = false;
                this.columnid_type.AllowDBNull = false;
                this.columnid_type.MaxLength = 1;
                this.columntaxno.AllowDBNull = false;
                this.columntaxno.MaxLength = 10;
                this.columnnolateamt.AllowDBNull = false;
                this.columnpretax.AllowDBNull = false;
                this.columnIN_JOB.MaxLength = 1;
                this.columnBASCD.MaxLength = 1;
                this.columnCHOLD_NOBR.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASERow NewBASERow() {
                return ((BASERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BASERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BASERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BASERowChanged != null)) {
                    this.BASERowChanged(this, new BASERowChangeEvent(((BASERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BASERowChanging != null)) {
                    this.BASERowChanging(this, new BASERowChangeEvent(((BASERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BASERowDeleted != null)) {
                    this.BASERowDeleted(this, new BASERowChangeEvent(((BASERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BASERowDeleting != null)) {
                    this.BASERowDeleting(this, new BASERowChangeEvent(((BASERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBASERow(BASERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BASEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeptDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnidParent;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnpath;
            
            private System.Data.DataColumn columnDeptLevel_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptDataTable() {
                this.TableName = "Dept";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeptDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeptDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idParentColumn {
                get {
                    return this.columnidParent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeptLevel_idColumn {
                get {
                    return this.columnDeptLevel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow this[int index] {
                get {
                    return ((DeptRow)(this.Rows[index]));
                }
            }
            
            public event DeptRowChangeEventHandler DeptRowChanging;
            
            public event DeptRowChangeEventHandler DeptRowChanged;
            
            public event DeptRowChangeEventHandler DeptRowDeleting;
            
            public event DeptRowChangeEventHandler DeptRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeptRow(DeptRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow AddDeptRow(string id, string idParent, string name, string path, string DeptLevel_id) {
                DeptRow rowDeptRow = ((DeptRow)(this.NewRow()));
                rowDeptRow.ItemArray = new object[] {
                        id,
                        idParent,
                        name,
                        path,
                        DeptLevel_id};
                this.Rows.Add(rowDeptRow);
                return rowDeptRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow FindByid(string id) {
                return ((DeptRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DeptDataTable cln = ((DeptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DeptDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnidParent = base.Columns["idParent"];
                this.columnname = base.Columns["name"];
                this.columnpath = base.Columns["path"];
                this.columnDeptLevel_id = base.Columns["DeptLevel_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnidParent = new System.Data.DataColumn("idParent", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidParent);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnpath = new System.Data.DataColumn("path", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpath);
                this.columnDeptLevel_id = new System.Data.DataColumn("DeptLevel_id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeptLevel_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnid.MaxLength = 50;
                this.columnidParent.MaxLength = 50;
                this.columnname.MaxLength = 50;
                this.columnpath.MaxLength = 255;
                this.columnDeptLevel_id.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow NewDeptRow() {
                return ((DeptRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DeptRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DeptRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeptRowChanged != null)) {
                    this.DeptRowChanged(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeptRowChanging != null)) {
                    this.DeptRowChanging(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeptRowDeleted != null)) {
                    this.DeptRowDeleted(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeptRowDeleting != null)) {
                    this.DeptRowDeleting(this, new DeptRowChangeEvent(((DeptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeptRow(DeptRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PosDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnPosLevel_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosDataTable() {
                this.TableName = "Pos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PosDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PosLevel_idColumn {
                get {
                    return this.columnPosLevel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow this[int index] {
                get {
                    return ((PosRow)(this.Rows[index]));
                }
            }
            
            public event PosRowChangeEventHandler PosRowChanging;
            
            public event PosRowChangeEventHandler PosRowChanged;
            
            public event PosRowChangeEventHandler PosRowDeleting;
            
            public event PosRowChangeEventHandler PosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPosRow(PosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow AddPosRow(string id, string name, string PosLevel_id) {
                PosRow rowPosRow = ((PosRow)(this.NewRow()));
                rowPosRow.ItemArray = new object[] {
                        id,
                        name,
                        PosLevel_id};
                this.Rows.Add(rowPosRow);
                return rowPosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow FindByid(string id) {
                return ((PosRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PosDataTable cln = ((PosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnPosLevel_id = base.Columns["PosLevel_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnPosLevel_id = new System.Data.DataColumn("PosLevel_id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosLevel_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnid.MaxLength = 50;
                this.columnname.MaxLength = 50;
                this.columnPosLevel_id.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow NewPosRow() {
                return ((PosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PosRowChanged != null)) {
                    this.PosRowChanged(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PosRowChanging != null)) {
                    this.PosRowChanging(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PosRowDeleted != null)) {
                    this.PosRowDeleted(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PosRowDeleting != null)) {
                    this.PosRowDeleting(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePosRow(PosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnpw;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnisNeedAgent;
            
            private System.Data.DataColumn columndateB;
            
            private System.Data.DataColumn columndateE;
            
            private System.Data.DataColumn columnemail;
            
            private System.Data.DataColumn columnlogin;
            
            private System.Data.DataColumn columnsex;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDataTable() {
                this.TableName = "Emp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pwColumn {
                get {
                    return this.columnpw;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isNeedAgentColumn {
                get {
                    return this.columnisNeedAgent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateBColumn {
                get {
                    return this.columndateB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateEColumn {
                get {
                    return this.columndateE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRow this[int index] {
                get {
                    return ((EmpRow)(this.Rows[index]));
                }
            }
            
            public event EmpRowChangeEventHandler EmpRowChanging;
            
            public event EmpRowChangeEventHandler EmpRowChanged;
            
            public event EmpRowChangeEventHandler EmpRowDeleting;
            
            public event EmpRowChangeEventHandler EmpRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpRow(EmpRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRow AddEmpRow(string id, string pw, string name, bool isNeedAgent, System.DateTime dateB, System.DateTime dateE, string email, string login, string sex) {
                EmpRow rowEmpRow = ((EmpRow)(this.NewRow()));
                rowEmpRow.ItemArray = new object[] {
                        id,
                        pw,
                        name,
                        isNeedAgent,
                        dateB,
                        dateE,
                        email,
                        login,
                        sex};
                this.Rows.Add(rowEmpRow);
                return rowEmpRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRow FindByid(string id) {
                return ((EmpRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmpDataTable cln = ((EmpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmpDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnpw = base.Columns["pw"];
                this.columnname = base.Columns["name"];
                this.columnisNeedAgent = base.Columns["isNeedAgent"];
                this.columndateB = base.Columns["dateB"];
                this.columndateE = base.Columns["dateE"];
                this.columnemail = base.Columns["email"];
                this.columnlogin = base.Columns["login"];
                this.columnsex = base.Columns["sex"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnpw = new System.Data.DataColumn("pw", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpw);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnisNeedAgent = new System.Data.DataColumn("isNeedAgent", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisNeedAgent);
                this.columndateB = new System.Data.DataColumn("dateB", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndateB);
                this.columndateE = new System.Data.DataColumn("dateE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndateE);
                this.columnemail = new System.Data.DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnlogin = new System.Data.DataColumn("login", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin);
                this.columnsex = new System.Data.DataColumn("sex", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnid.MaxLength = 50;
                this.columnpw.MaxLength = 50;
                this.columnname.MaxLength = 50;
                this.columnemail.MaxLength = 50;
                this.columnlogin.MaxLength = 50;
                this.columnsex.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRow NewEmpRow() {
                return ((EmpRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmpRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmpRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpRowChanged != null)) {
                    this.EmpRowChanged(this, new EmpRowChangeEvent(((EmpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpRowChanging != null)) {
                    this.EmpRowChanging(this, new EmpRowChangeEvent(((EmpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpRowDeleted != null)) {
                    this.EmpRowDeleted(this, new EmpRowChangeEvent(((EmpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpRowDeleting != null)) {
                    this.EmpRowDeleting(this, new EmpRowChangeEvent(((EmpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpRow(EmpRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RoleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnauto;
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnidParent;
            
            private System.Data.DataColumn columnDept_id;
            
            private System.Data.DataColumn columnPos_id;
            
            private System.Data.DataColumn columndateB;
            
            private System.Data.DataColumn columndateE;
            
            private System.Data.DataColumn columnEmp_id;
            
            private System.Data.DataColumn columnmgDefault;
            
            private System.Data.DataColumn columndeptMg;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleDataTable() {
                this.TableName = "Role";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RoleDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RoleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn autoColumn {
                get {
                    return this.columnauto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idParentColumn {
                get {
                    return this.columnidParent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Dept_idColumn {
                get {
                    return this.columnDept_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Pos_idColumn {
                get {
                    return this.columnPos_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateBColumn {
                get {
                    return this.columndateB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateEColumn {
                get {
                    return this.columndateE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Emp_idColumn {
                get {
                    return this.columnEmp_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn mgDefaultColumn {
                get {
                    return this.columnmgDefault;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn deptMgColumn {
                get {
                    return this.columndeptMg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleRow this[int index] {
                get {
                    return ((RoleRow)(this.Rows[index]));
                }
            }
            
            public event RoleRowChangeEventHandler RoleRowChanging;
            
            public event RoleRowChangeEventHandler RoleRowChanged;
            
            public event RoleRowChangeEventHandler RoleRowDeleting;
            
            public event RoleRowChangeEventHandler RoleRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRoleRow(RoleRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleRow AddRoleRow(string id, string idParent, string Dept_id, string Pos_id, System.DateTime dateB, System.DateTime dateE, string Emp_id, bool mgDefault, bool deptMg) {
                RoleRow rowRoleRow = ((RoleRow)(this.NewRow()));
                rowRoleRow.ItemArray = new object[] {
                        null,
                        id,
                        idParent,
                        Dept_id,
                        Pos_id,
                        dateB,
                        dateE,
                        Emp_id,
                        mgDefault,
                        deptMg};
                this.Rows.Add(rowRoleRow);
                return rowRoleRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleRow FindByauto(int auto) {
                return ((RoleRow)(this.Rows.Find(new object[] {
                            auto})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RoleDataTable cln = ((RoleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RoleDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnauto = base.Columns["auto"];
                this.columnid = base.Columns["id"];
                this.columnidParent = base.Columns["idParent"];
                this.columnDept_id = base.Columns["Dept_id"];
                this.columnPos_id = base.Columns["Pos_id"];
                this.columndateB = base.Columns["dateB"];
                this.columndateE = base.Columns["dateE"];
                this.columnEmp_id = base.Columns["Emp_id"];
                this.columnmgDefault = base.Columns["mgDefault"];
                this.columndeptMg = base.Columns["deptMg"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnauto = new System.Data.DataColumn("auto", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnauto);
                this.columnid = new System.Data.DataColumn("id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnidParent = new System.Data.DataColumn("idParent", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidParent);
                this.columnDept_id = new System.Data.DataColumn("Dept_id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDept_id);
                this.columnPos_id = new System.Data.DataColumn("Pos_id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPos_id);
                this.columndateB = new System.Data.DataColumn("dateB", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndateB);
                this.columndateE = new System.Data.DataColumn("dateE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndateE);
                this.columnEmp_id = new System.Data.DataColumn("Emp_id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmp_id);
                this.columnmgDefault = new System.Data.DataColumn("mgDefault", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgDefault);
                this.columndeptMg = new System.Data.DataColumn("deptMg", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeptMg);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnauto}, true));
                this.columnauto.AutoIncrement = true;
                this.columnauto.AllowDBNull = false;
                this.columnauto.ReadOnly = true;
                this.columnauto.Unique = true;
                this.columnid.MaxLength = 50;
                this.columnidParent.MaxLength = 50;
                this.columnDept_id.MaxLength = 50;
                this.columnPos_id.MaxLength = 50;
                this.columnEmp_id.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleRow NewRoleRow() {
                return ((RoleRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RoleRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RoleRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RoleRowChanged != null)) {
                    this.RoleRowChanged(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RoleRowChanging != null)) {
                    this.RoleRowChanging(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RoleRowDeleted != null)) {
                    this.RoleRowDeleted(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RoleRowDeleting != null)) {
                    this.RoleRowDeleting(this, new RoleRowChangeEvent(((RoleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRoleRow(RoleRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                OrgImportDS ds = new OrgImportDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RoleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BASETTSRow : System.Data.DataRow {
            
            private BASETTSDataTable tableBASETTS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BASETTSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBASETTS = ((BASETTSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nobr {
                get {
                    return ((string)(this[this.tableBASETTS.NobrColumn]));
                }
                set {
                    this[this.tableBASETTS.NobrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime adate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBASETTS.adateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'adate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.adateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ddate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBASETTS.ddateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'ddate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.ddateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dept {
                get {
                    try {
                        return ((string)(this[this.tableBASETTS.deptColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'dept\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.deptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string depts {
                get {
                    try {
                        return ((string)(this[this.tableBASETTS.deptsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'depts\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.deptsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job {
                get {
                    try {
                        return ((string)(this[this.tableBASETTS.jobColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'job\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.jobColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jobl {
                get {
                    try {
                        return ((string)(this[this.tableBASETTS.joblColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'jobl\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.joblColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool mang {
                get {
                    try {
                        return ((bool)(this[this.tableBASETTS.mangColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'mang\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.mangColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jobs {
                get {
                    try {
                        return ((string)(this[this.tableBASETTS.jobsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASETTS\' 中資料行 \'jobs\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASETTS.jobsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsadateNull() {
                return this.IsNull(this.tableBASETTS.adateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetadateNull() {
                this[this.tableBASETTS.adateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsddateNull() {
                return this.IsNull(this.tableBASETTS.ddateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetddateNull() {
                this[this.tableBASETTS.ddateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptNull() {
                return this.IsNull(this.tableBASETTS.deptColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptNull() {
                this[this.tableBASETTS.deptColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptsNull() {
                return this.IsNull(this.tableBASETTS.deptsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptsNull() {
                this[this.tableBASETTS.deptsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjobNull() {
                return this.IsNull(this.tableBASETTS.jobColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjobNull() {
                this[this.tableBASETTS.jobColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjoblNull() {
                return this.IsNull(this.tableBASETTS.joblColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjoblNull() {
                this[this.tableBASETTS.joblColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmangNull() {
                return this.IsNull(this.tableBASETTS.mangColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmangNull() {
                this[this.tableBASETTS.mangColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjobsNull() {
                return this.IsNull(this.tableBASETTS.jobsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjobsNull() {
                this[this.tableBASETTS.jobsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DEPTARow : System.Data.DataRow {
            
            private DEPTADataTable tableDEPTA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DEPTARow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDEPTA = ((DEPTADataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPT_GROUP {
                get {
                    try {
                        return ((string)(this[this.tableDEPTA.DEPT_GROUPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'DEPTA\' 中資料行 \'DEPT_GROUP\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPTA.DEPT_GROUPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string d_no {
                get {
                    return ((string)(this[this.tableDEPTA.d_noColumn]));
                }
                set {
                    this[this.tableDEPTA.d_noColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string d_name {
                get {
                    return ((string)(this[this.tableDEPTA.d_nameColumn]));
                }
                set {
                    this[this.tableDEPTA.d_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime key_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDEPTA.key_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'DEPTA\' 中資料行 \'key_date\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPTA.key_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string key_man {
                get {
                    try {
                        return ((string)(this[this.tableDEPTA.key_manColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'DEPTA\' 中資料行 \'key_man\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPTA.key_manColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string old_dept {
                get {
                    try {
                        return ((string)(this[this.tableDEPTA.old_deptColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'DEPTA\' 中資料行 \'old_dept\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPTA.old_deptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPT_GROUPNull() {
                return this.IsNull(this.tableDEPTA.DEPT_GROUPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPT_GROUPNull() {
                this[this.tableDEPTA.DEPT_GROUPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskey_dateNull() {
                return this.IsNull(this.tableDEPTA.key_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkey_dateNull() {
                this[this.tableDEPTA.key_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskey_manNull() {
                return this.IsNull(this.tableDEPTA.key_manColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkey_manNull() {
                this[this.tableDEPTA.key_manColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_deptNull() {
                return this.IsNull(this.tableDEPTA.old_deptColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_deptNull() {
                this[this.tableDEPTA.old_deptColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JOBRow : System.Data.DataRow {
            
            private JOBDataTable tableJOB;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JOBRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJOB = ((JOBDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job {
                get {
                    return ((string)(this[this.tableJOB.jobColumn]));
                }
                set {
                    this[this.tableJOB.jobColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job_name {
                get {
                    return ((string)(this[this.tableJOB.job_nameColumn]));
                }
                set {
                    this[this.tableJOB.job_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime key_date {
                get {
                    return ((System.DateTime)(this[this.tableJOB.key_dateColumn]));
                }
                set {
                    this[this.tableJOB.key_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string key_man {
                get {
                    return ((string)(this[this.tableJOB.key_manColumn]));
                }
                set {
                    this[this.tableJOB.key_manColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job_tree {
                get {
                    return ((string)(this[this.tableJOB.job_treeColumn]));
                }
                set {
                    this[this.tableJOB.job_treeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JOB_LEAR {
                get {
                    try {
                        return ((string)(this[this.tableJOB.JOB_LEARColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'JOB_LEAR\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.JOB_LEARColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string work_type {
                get {
                    try {
                        return ((string)(this[this.tableJOB.work_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'work_type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.work_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime adate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableJOB.adateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'adate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.adateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ddate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableJOB.ddateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'ddate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.ddateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string job_ename {
                get {
                    try {
                        return ((string)(this[this.tableJOB.job_enameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'job_ename\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.job_enameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int jobsal {
                get {
                    try {
                        return ((int)(this[this.tableJOB.jobsalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'jobsal\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.jobsalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string deptcate {
                get {
                    try {
                        return ((string)(this[this.tableJOB.deptcateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'JOB\' 中資料行 \'deptcate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableJOB.deptcateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJOB_LEARNull() {
                return this.IsNull(this.tableJOB.JOB_LEARColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJOB_LEARNull() {
                this[this.tableJOB.JOB_LEARColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iswork_typeNull() {
                return this.IsNull(this.tableJOB.work_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setwork_typeNull() {
                this[this.tableJOB.work_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsadateNull() {
                return this.IsNull(this.tableJOB.adateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetadateNull() {
                this[this.tableJOB.adateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsddateNull() {
                return this.IsNull(this.tableJOB.ddateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetddateNull() {
                this[this.tableJOB.ddateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isjob_enameNull() {
                return this.IsNull(this.tableJOB.job_enameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setjob_enameNull() {
                this[this.tableJOB.job_enameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjobsalNull() {
                return this.IsNull(this.tableJOB.jobsalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjobsalNull() {
                this[this.tableJOB.jobsalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptcateNull() {
                return this.IsNull(this.tableJOB.deptcateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptcateNull() {
                this[this.tableJOB.deptcateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BASERow : System.Data.DataRow {
            
            private BASEDataTable tableBASE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BASERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBASE = ((BASEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nobr {
                get {
                    return ((string)(this[this.tableBASE.NobrColumn]));
                }
                set {
                    this[this.tableBASE.NobrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name_c {
                get {
                    return ((string)(this[this.tableBASE.name_cColumn]));
                }
                set {
                    this[this.tableBASE.name_cColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name_e {
                get {
                    return ((string)(this[this.tableBASE.name_eColumn]));
                }
                set {
                    this[this.tableBASE.name_eColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    return ((string)(this[this.tableBASE.sexColumn]));
                }
                set {
                    this[this.tableBASE.sexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime birdt {
                get {
                    return ((System.DateTime)(this[this.tableBASE.birdtColumn]));
                }
                set {
                    this[this.tableBASE.birdtColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr1 {
                get {
                    return ((string)(this[this.tableBASE.addr1Column]));
                }
                set {
                    this[this.tableBASE.addr1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr2 {
                get {
                    return ((string)(this[this.tableBASE.addr2Column]));
                }
                set {
                    this[this.tableBASE.addr2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tel1 {
                get {
                    return ((string)(this[this.tableBASE.tel1Column]));
                }
                set {
                    this[this.tableBASE.tel1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tel2 {
                get {
                    return ((string)(this[this.tableBASE.tel2Column]));
                }
                set {
                    this[this.tableBASE.tel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bbcall {
                get {
                    return ((string)(this[this.tableBASE.bbcallColumn]));
                }
                set {
                    this[this.tableBASE.bbcallColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    return ((string)(this[this.tableBASE.emailColumn]));
                }
                set {
                    this[this.tableBASE.emailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gsm {
                get {
                    return ((string)(this[this.tableBASE.gsmColumn]));
                }
                set {
                    this[this.tableBASE.gsmColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idno {
                get {
                    return ((string)(this[this.tableBASE.idnoColumn]));
                }
                set {
                    this[this.tableBASE.idnoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_man {
                get {
                    return ((string)(this[this.tableBASE.cont_manColumn]));
                }
                set {
                    this[this.tableBASE.cont_manColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_tel {
                get {
                    return ((string)(this[this.tableBASE.cont_telColumn]));
                }
                set {
                    this[this.tableBASE.cont_telColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_gsm {
                get {
                    return ((string)(this[this.tableBASE.cont_gsmColumn]));
                }
                set {
                    this[this.tableBASE.cont_gsmColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_man2 {
                get {
                    return ((string)(this[this.tableBASE.cont_man2Column]));
                }
                set {
                    this[this.tableBASE.cont_man2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_tel2 {
                get {
                    return ((string)(this[this.tableBASE.cont_tel2Column]));
                }
                set {
                    this[this.tableBASE.cont_tel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_gsm2 {
                get {
                    return ((string)(this[this.tableBASE.cont_gsm2Column]));
                }
                set {
                    this[this.tableBASE.cont_gsm2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string blood {
                get {
                    return ((string)(this[this.tableBASE.bloodColumn]));
                }
                set {
                    this[this.tableBASE.bloodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string password {
                get {
                    return ((string)(this[this.tableBASE.passwordColumn]));
                }
                set {
                    this[this.tableBASE.passwordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string postcode1 {
                get {
                    return ((string)(this[this.tableBASE.postcode1Column]));
                }
                set {
                    this[this.tableBASE.postcode1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string postcode2 {
                get {
                    return ((string)(this[this.tableBASE.postcode2Column]));
                }
                set {
                    this[this.tableBASE.postcode2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bank_code {
                get {
                    return ((string)(this[this.tableBASE.bank_codeColumn]));
                }
                set {
                    this[this.tableBASE.bank_codeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bankno {
                get {
                    return ((string)(this[this.tableBASE.banknoColumn]));
                }
                set {
                    this[this.tableBASE.banknoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_no {
                get {
                    return ((string)(this[this.tableBASE.account_noColumn]));
                }
                set {
                    this[this.tableBASE.account_noColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string marry {
                get {
                    return ((string)(this[this.tableBASE.marryColumn]));
                }
                set {
                    this[this.tableBASE.marryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string country {
                get {
                    return ((string)(this[this.tableBASE.countryColumn]));
                }
                set {
                    this[this.tableBASE.countryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool count_ma {
                get {
                    return ((bool)(this[this.tableBASE.count_maColumn]));
                }
                set {
                    this[this.tableBASE.count_maColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string army {
                get {
                    return ((string)(this[this.tableBASE.armyColumn]));
                }
                set {
                    this[this.tableBASE.armyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_man1 {
                get {
                    return ((string)(this[this.tableBASE.pro_man1Column]));
                }
                set {
                    this[this.tableBASE.pro_man1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_addr1 {
                get {
                    return ((string)(this[this.tableBASE.pro_addr1Column]));
                }
                set {
                    this[this.tableBASE.pro_addr1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_id1 {
                get {
                    return ((string)(this[this.tableBASE.pro_id1Column]));
                }
                set {
                    this[this.tableBASE.pro_id1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_tel1 {
                get {
                    return ((string)(this[this.tableBASE.pro_tel1Column]));
                }
                set {
                    this[this.tableBASE.pro_tel1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_man2 {
                get {
                    return ((string)(this[this.tableBASE.pro_man2Column]));
                }
                set {
                    this[this.tableBASE.pro_man2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_addr2 {
                get {
                    return ((string)(this[this.tableBASE.pro_addr2Column]));
                }
                set {
                    this[this.tableBASE.pro_addr2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_id2 {
                get {
                    return ((string)(this[this.tableBASE.pro_id2Column]));
                }
                set {
                    this[this.tableBASE.pro_id2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pro_tel2 {
                get {
                    return ((string)(this[this.tableBASE.pro_tel2Column]));
                }
                set {
                    this[this.tableBASE.pro_tel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string army_type {
                get {
                    return ((string)(this[this.tableBASE.army_typeColumn]));
                }
                set {
                    this[this.tableBASE.army_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string n_Nobr {
                get {
                    return ((string)(this[this.tableBASE.n_NobrColumn]));
                }
                set {
                    this[this.tableBASE.n_NobrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nobr_b {
                get {
                    return ((string)(this[this.tableBASE.nobr_bColumn]));
                }
                set {
                    this[this.tableBASE.nobr_bColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string province {
                get {
                    return ((string)(this[this.tableBASE.provinceColumn]));
                }
                set {
                    this[this.tableBASE.provinceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string born_addr {
                get {
                    return ((string)(this[this.tableBASE.born_addrColumn]));
                }
                set {
                    this[this.tableBASE.born_addrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal taxcnt {
                get {
                    return ((decimal)(this[this.tableBASE.taxcntColumn]));
                }
                set {
                    this[this.tableBASE.taxcntColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string key_man {
                get {
                    return ((string)(this[this.tableBASE.key_manColumn]));
                }
                set {
                    this[this.tableBASE.key_manColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime key_date {
                get {
                    return ((System.DateTime)(this[this.tableBASE.key_dateColumn]));
                }
                set {
                    this[this.tableBASE.key_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id_type {
                get {
                    return ((string)(this[this.tableBASE.id_typeColumn]));
                }
                set {
                    this[this.tableBASE.id_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxno {
                get {
                    return ((string)(this[this.tableBASE.taxnoColumn]));
                }
                set {
                    this[this.tableBASE.taxnoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool nolateamt {
                get {
                    return ((bool)(this[this.tableBASE.nolateamtColumn]));
                }
                set {
                    this[this.tableBASE.nolateamtColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pretax {
                get {
                    return ((decimal)(this[this.tableBASE.pretaxColumn]));
                }
                set {
                    this[this.tableBASE.pretaxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IN_JOB {
                get {
                    try {
                        return ((string)(this[this.tableBASE.IN_JOBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'IN_JOB\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.IN_JOBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TAXMAST {
                get {
                    try {
                        return ((bool)(this[this.tableBASE.TAXMASTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'TAXMAST\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.TAXMASTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool COUNT_PA {
                get {
                    try {
                        return ((bool)(this[this.tableBASE.COUNT_PAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'COUNT_PA\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.COUNT_PAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASCD {
                get {
                    try {
                        return ((string)(this[this.tableBASE.BASCDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'BASCD\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.BASCDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHOLD_NOBR {
                get {
                    try {
                        return ((string)(this[this.tableBASE.CHOLD_NOBRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'CHOLD_NOBR\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.CHOLD_NOBRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool mark {
                get {
                    try {
                        return ((bool)(this[this.tableBASE.markColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'mark\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.markColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool an_mang {
                get {
                    try {
                        return ((bool)(this[this.tableBASE.an_mangColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'BASE\' 中資料行 \'an_mang\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBASE.an_mangColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIN_JOBNull() {
                return this.IsNull(this.tableBASE.IN_JOBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIN_JOBNull() {
                this[this.tableBASE.IN_JOBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXMASTNull() {
                return this.IsNull(this.tableBASE.TAXMASTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXMASTNull() {
                this[this.tableBASE.TAXMASTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNT_PANull() {
                return this.IsNull(this.tableBASE.COUNT_PAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNT_PANull() {
                this[this.tableBASE.COUNT_PAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASCDNull() {
                return this.IsNull(this.tableBASE.BASCDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASCDNull() {
                this[this.tableBASE.BASCDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHOLD_NOBRNull() {
                return this.IsNull(this.tableBASE.CHOLD_NOBRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHOLD_NOBRNull() {
                this[this.tableBASE.CHOLD_NOBRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmarkNull() {
                return this.IsNull(this.tableBASE.markColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmarkNull() {
                this[this.tableBASE.markColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isan_mangNull() {
                return this.IsNull(this.tableBASE.an_mangColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setan_mangNull() {
                this[this.tableBASE.an_mangColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeptRow : System.Data.DataRow {
            
            private DeptDataTable tableDept;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeptRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDept = ((DeptDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableDept.idColumn]));
                }
                set {
                    this[this.tableDept.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idParent {
                get {
                    try {
                        return ((string)(this[this.tableDept.idParentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Dept\' 中資料行 \'idParent\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDept.idParentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableDept.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Dept\' 中資料行 \'name\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDept.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string path {
                get {
                    try {
                        return ((string)(this[this.tableDept.pathColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Dept\' 中資料行 \'path\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDept.pathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeptLevel_id {
                get {
                    try {
                        return ((string)(this[this.tableDept.DeptLevel_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Dept\' 中資料行 \'DeptLevel_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDept.DeptLevel_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidParentNull() {
                return this.IsNull(this.tableDept.idParentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidParentNull() {
                this[this.tableDept.idParentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableDept.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableDept.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspathNull() {
                return this.IsNull(this.tableDept.pathColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpathNull() {
                this[this.tableDept.pathColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeptLevel_idNull() {
                return this.IsNull(this.tableDept.DeptLevel_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeptLevel_idNull() {
                this[this.tableDept.DeptLevel_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PosRow : System.Data.DataRow {
            
            private PosDataTable tablePos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePos = ((PosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablePos.idColumn]));
                }
                set {
                    this[this.tablePos.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablePos.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Pos\' 中資料行 \'name\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePos.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PosLevel_id {
                get {
                    try {
                        return ((string)(this[this.tablePos.PosLevel_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Pos\' 中資料行 \'PosLevel_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePos.PosLevel_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablePos.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablePos.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPosLevel_idNull() {
                return this.IsNull(this.tablePos.PosLevel_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPosLevel_idNull() {
                this[this.tablePos.PosLevel_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpRow : System.Data.DataRow {
            
            private EmpDataTable tableEmp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmp = ((EmpDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableEmp.idColumn]));
                }
                set {
                    this[this.tableEmp.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pw {
                get {
                    try {
                        return ((string)(this[this.tableEmp.pwColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'pw\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.pwColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableEmp.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'name\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isNeedAgent {
                get {
                    try {
                        return ((bool)(this[this.tableEmp.isNeedAgentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'isNeedAgent\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.isNeedAgentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateB {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmp.dateBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'dateB\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.dateBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmp.dateEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'dateE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.dateEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableEmp.emailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'email\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.emailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string login {
                get {
                    try {
                        return ((string)(this[this.tableEmp.loginColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'login\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.loginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tableEmp.sexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Emp\' 中資料行 \'sex\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEmp.sexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspwNull() {
                return this.IsNull(this.tableEmp.pwColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpwNull() {
                this[this.tableEmp.pwColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableEmp.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableEmp.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisNeedAgentNull() {
                return this.IsNull(this.tableEmp.isNeedAgentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisNeedAgentNull() {
                this[this.tableEmp.isNeedAgentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateBNull() {
                return this.IsNull(this.tableEmp.dateBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateBNull() {
                this[this.tableEmp.dateBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateENull() {
                return this.IsNull(this.tableEmp.dateEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateENull() {
                this[this.tableEmp.dateEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableEmp.emailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableEmp.emailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginNull() {
                return this.IsNull(this.tableEmp.loginColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginNull() {
                this[this.tableEmp.loginColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tableEmp.sexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tableEmp.sexColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RoleRow : System.Data.DataRow {
            
            private RoleDataTable tableRole;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RoleRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRole = ((RoleDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int auto {
                get {
                    return ((int)(this[this.tableRole.autoColumn]));
                }
                set {
                    this[this.tableRole.autoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableRole.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idParent {
                get {
                    try {
                        return ((string)(this[this.tableRole.idParentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'idParent\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.idParentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dept_id {
                get {
                    try {
                        return ((string)(this[this.tableRole.Dept_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'Dept_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.Dept_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pos_id {
                get {
                    try {
                        return ((string)(this[this.tableRole.Pos_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'Pos_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.Pos_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateB {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableRole.dateBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'dateB\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.dateBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableRole.dateEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'dateE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.dateEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emp_id {
                get {
                    try {
                        return ((string)(this[this.tableRole.Emp_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'Emp_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.Emp_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool mgDefault {
                get {
                    try {
                        return ((bool)(this[this.tableRole.mgDefaultColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'mgDefault\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.mgDefaultColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool deptMg {
                get {
                    try {
                        return ((bool)(this[this.tableRole.deptMgColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("資料表 \'Role\' 中資料行 \'deptMg\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRole.deptMgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableRole.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableRole.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidParentNull() {
                return this.IsNull(this.tableRole.idParentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidParentNull() {
                this[this.tableRole.idParentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDept_idNull() {
                return this.IsNull(this.tableRole.Dept_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDept_idNull() {
                this[this.tableRole.Dept_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPos_idNull() {
                return this.IsNull(this.tableRole.Pos_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPos_idNull() {
                this[this.tableRole.Pos_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateBNull() {
                return this.IsNull(this.tableRole.dateBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateBNull() {
                this[this.tableRole.dateBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateENull() {
                return this.IsNull(this.tableRole.dateEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateENull() {
                this[this.tableRole.dateEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmp_idNull() {
                return this.IsNull(this.tableRole.Emp_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmp_idNull() {
                this[this.tableRole.Emp_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmgDefaultNull() {
                return this.IsNull(this.tableRole.mgDefaultColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmgDefaultNull() {
                this[this.tableRole.mgDefaultColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptMgNull() {
                return this.IsNull(this.tableRole.deptMgColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptMgNull() {
                this[this.tableRole.deptMgColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BASETTSRowChangeEvent : System.EventArgs {
            
            private BASETTSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASETTSRowChangeEvent(BASETTSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASETTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DEPTARowChangeEvent : System.EventArgs {
            
            private DEPTARow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTARowChangeEvent(DEPTARow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JOBRowChangeEvent : System.EventArgs {
            
            private JOBRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JOBRowChangeEvent(JOBRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JOBRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BASERowChangeEvent : System.EventArgs {
            
            private BASERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASERowChangeEvent(BASERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BASERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeptRowChangeEvent : System.EventArgs {
            
            private DeptRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRowChangeEvent(DeptRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PosRowChangeEvent : System.EventArgs {
            
            private PosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRowChangeEvent(PosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpRowChangeEvent : System.EventArgs {
            
            private EmpRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRowChangeEvent(EmpRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RoleRowChangeEvent : System.EventArgs {
            
            private RoleRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleRowChangeEvent(RoleRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace OrgImport.OrgImportDSTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BASETTSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BASETTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BASETTS";
            tableMapping.ColumnMappings.Add("adate", "adate");
            tableMapping.ColumnMappings.Add("ddate", "ddate");
            tableMapping.ColumnMappings.Add("Nobr", "Nobr");
            tableMapping.ColumnMappings.Add("dept", "dept");
            tableMapping.ColumnMappings.Add("depts", "depts");
            tableMapping.ColumnMappings.Add("job", "job");
            tableMapping.ColumnMappings.Add("jobl", "jobl");
            tableMapping.ColumnMappings.Add("mang", "mang");
            tableMapping.ColumnMappings.Add("jobs", "jobs");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.JBHRConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT         Nobr, adate, ddate, dept, depts, job, jobl, jobs, mang
FROM             basetts
WHERE         (GETDATE() BETWEEN adate AND ddate) AND (ttscode IN ('1', '4', '6')) AND 
                          (dept IN
                              (SELECT         d_no
                                FROM              dept
                                WHERE          (GETDATE() BETWEEN ADATE AND DDATE))) AND 
                          (job IN
                              (SELECT         job
                                FROM              job
                                WHERE          (GETDATE() BETWEEN adate AND ddate))) AND (Nobr IN
                              (SELECT         Nobr
                                FROM              base))
ORDER BY  Nobr";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT         COUNT(NOBR) AS Counter
FROM             BASETTS
WHERE         (GETDATE() BETWEEN ADATE AND DDATE) AND (TTSCODE IN ('1', '4', '6')) AND 
                          (DEPT IN
                              (SELECT         D_NO
                                FROM              DEPT)) AND (JOB IN
                              (SELECT         JOB
                                FROM              JOB)) AND (NOBR IN
                              (SELECT         NOBR
                                FROM              BASE))";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT Nobr, adate, ddate, dept, depts, job, jobl, jobs, mang FROM basetts WHERE (GETDATE() BETWEEN adate AND ddate) AND (ttscode IN ('1', '4', '6')) AND (dept IN (SELECT d_no FROM dept)) AND (job IN (SELECT job FROM job)) AND (Nobr IN (SELECT Nobr FROM base)) AND (mang = 1) ORDER BY Nobr";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.BASETTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.BASETTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.BASETTSDataTable dataTable = new OrgImportDS.BASETTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMang(OrgImportDS.BASETTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual OrgImportDS.BASETTSDataTable GetDataByMang() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            OrgImportDS.BASETTSDataTable dataTable = new OrgImportDS.BASETTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual System.Nullable<int> EmpCounter() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return new System.Nullable<int>();
            }
            else {
                return new System.Nullable<int>(((int)(returnValue)));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DEPTATableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DEPTATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DEPTA";
            tableMapping.ColumnMappings.Add("DEPT_GROUP", "DEPT_GROUP");
            tableMapping.ColumnMappings.Add("d_no", "d_no");
            tableMapping.ColumnMappings.Add("d_name", "d_name");
            tableMapping.ColumnMappings.Add("key_date", "key_date");
            tableMapping.ColumnMappings.Add("key_man", "key_man");
            tableMapping.ColumnMappings.Add("old_dept", "old_dept");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.JBHRConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         d_no, d_name, key_date, key_man, old_dept, PAR_DEP AS DEPT_GROUP\r\n" +
                "FROM             dept\r\nWHERE         (GETDATE() BETWEEN ADATE AND DDATE)\r\nORDER " +
                "BY  DEPT_GROUP, d_no";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.DEPTADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.DEPTADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.DEPTADataTable dataTable = new OrgImportDS.DEPTADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class JOBTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JOBTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "JOB";
            tableMapping.ColumnMappings.Add("job", "job");
            tableMapping.ColumnMappings.Add("job_name", "job_name");
            tableMapping.ColumnMappings.Add("key_date", "key_date");
            tableMapping.ColumnMappings.Add("key_man", "key_man");
            tableMapping.ColumnMappings.Add("job_tree", "job_tree");
            tableMapping.ColumnMappings.Add("JOB_LEAR", "JOB_LEAR");
            tableMapping.ColumnMappings.Add("work_type", "work_type");
            tableMapping.ColumnMappings.Add("adate", "adate");
            tableMapping.ColumnMappings.Add("ddate", "ddate");
            tableMapping.ColumnMappings.Add("job_ename", "job_ename");
            tableMapping.ColumnMappings.Add("jobsal", "jobsal");
            tableMapping.ColumnMappings.Add("deptcate", "deptcate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [job] ([job], [job_name], [key_date], [key_man], [job_tree], [JOB_LEAR], [work_type], [adate], [ddate], [job_ename], [jobsal], [deptcate]) VALUES (@job, @job_name, @key_date, @key_man, @job_tree, @JOB_LEAR, @work_type, @adate, @ddate, @job_ename, @jobsal, @deptcate)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@job", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "job", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@job_name", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "job_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@key_date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "key_date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@key_man", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "key_man", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@job_tree", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "job_tree", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JOB_LEAR", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "JOB_LEAR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@work_type", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "work_type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@adate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "adate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ddate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ddate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@job_ename", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "job_ename", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@jobsal", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "jobsal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@deptcate", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "deptcate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.JBHRConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         job, job_name, key_date, key_man, job_tree, JOB_LEAR, work_type, a" +
                "date, \r\n                          ddate, job_ename, jobsal, deptcate\r\nFROM      " +
                "       job\r\nWHERE         (GETDATE() BETWEEN adate AND ddate)\r\nORDER BY  job";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.JOBDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.JOBDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.JOBDataTable dataTable = new OrgImportDS.JOBDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS.JOBDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS dataSet) {
            return this.Adapter.Update(dataSet, "JOB");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BASETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BASETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BASE";
            tableMapping.ColumnMappings.Add("Nobr", "Nobr");
            tableMapping.ColumnMappings.Add("name_c", "name_c");
            tableMapping.ColumnMappings.Add("name_e", "name_e");
            tableMapping.ColumnMappings.Add("sex", "sex");
            tableMapping.ColumnMappings.Add("birdt", "birdt");
            tableMapping.ColumnMappings.Add("addr1", "addr1");
            tableMapping.ColumnMappings.Add("addr2", "addr2");
            tableMapping.ColumnMappings.Add("tel1", "tel1");
            tableMapping.ColumnMappings.Add("tel2", "tel2");
            tableMapping.ColumnMappings.Add("bbcall", "bbcall");
            tableMapping.ColumnMappings.Add("email", "email");
            tableMapping.ColumnMappings.Add("gsm", "gsm");
            tableMapping.ColumnMappings.Add("idno", "idno");
            tableMapping.ColumnMappings.Add("cont_man", "cont_man");
            tableMapping.ColumnMappings.Add("cont_tel", "cont_tel");
            tableMapping.ColumnMappings.Add("cont_gsm", "cont_gsm");
            tableMapping.ColumnMappings.Add("cont_man2", "cont_man2");
            tableMapping.ColumnMappings.Add("cont_tel2", "cont_tel2");
            tableMapping.ColumnMappings.Add("cont_gsm2", "cont_gsm2");
            tableMapping.ColumnMappings.Add("blood", "blood");
            tableMapping.ColumnMappings.Add("password", "password");
            tableMapping.ColumnMappings.Add("postcode1", "postcode1");
            tableMapping.ColumnMappings.Add("postcode2", "postcode2");
            tableMapping.ColumnMappings.Add("bank_code", "bank_code");
            tableMapping.ColumnMappings.Add("bankno", "bankno");
            tableMapping.ColumnMappings.Add("account_no", "account_no");
            tableMapping.ColumnMappings.Add("marry", "marry");
            tableMapping.ColumnMappings.Add("country", "country");
            tableMapping.ColumnMappings.Add("count_ma", "count_ma");
            tableMapping.ColumnMappings.Add("army", "army");
            tableMapping.ColumnMappings.Add("pro_man1", "pro_man1");
            tableMapping.ColumnMappings.Add("pro_addr1", "pro_addr1");
            tableMapping.ColumnMappings.Add("pro_id1", "pro_id1");
            tableMapping.ColumnMappings.Add("pro_tel1", "pro_tel1");
            tableMapping.ColumnMappings.Add("pro_man2", "pro_man2");
            tableMapping.ColumnMappings.Add("pro_addr2", "pro_addr2");
            tableMapping.ColumnMappings.Add("pro_id2", "pro_id2");
            tableMapping.ColumnMappings.Add("pro_tel2", "pro_tel2");
            tableMapping.ColumnMappings.Add("army_type", "army_type");
            tableMapping.ColumnMappings.Add("n_Nobr", "n_Nobr");
            tableMapping.ColumnMappings.Add("nobr_b", "nobr_b");
            tableMapping.ColumnMappings.Add("province", "province");
            tableMapping.ColumnMappings.Add("born_addr", "born_addr");
            tableMapping.ColumnMappings.Add("taxcnt", "taxcnt");
            tableMapping.ColumnMappings.Add("key_man", "key_man");
            tableMapping.ColumnMappings.Add("key_date", "key_date");
            tableMapping.ColumnMappings.Add("id_type", "id_type");
            tableMapping.ColumnMappings.Add("taxno", "taxno");
            tableMapping.ColumnMappings.Add("nolateamt", "nolateamt");
            tableMapping.ColumnMappings.Add("pretax", "pretax");
            tableMapping.ColumnMappings.Add("IN_JOB", "IN_JOB");
            tableMapping.ColumnMappings.Add("TAXMAST", "TAXMAST");
            tableMapping.ColumnMappings.Add("COUNT_PA", "COUNT_PA");
            tableMapping.ColumnMappings.Add("BASCD", "BASCD");
            tableMapping.ColumnMappings.Add("CHOLD_NOBR", "CHOLD_NOBR");
            tableMapping.ColumnMappings.Add("mark", "mark");
            tableMapping.ColumnMappings.Add("an_mang", "an_mang");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.JBHRConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         base.Nobr, base.name_c, base.name_e, base.sex, base.birdt, base.ad" +
                "dr1, \r\n                          base.addr2, base.tel1, base.tel2, base.bbcall, " +
                "base.gsm, base.idno, \r\n                          base.cont_man, base.cont_tel, b" +
                "ase.cont_gsm, base.cont_man2, \r\n                          base.cont_tel2, base.c" +
                "ont_gsm2, base.blood, base.password, base.postcode1, \r\n                         " +
                " base.postcode2, base.bank_code, base.bankno, base.account_no, base.marry, \r\n   " +
                "                       base.country, base.count_ma, base.army, base.pro_man1, ba" +
                "se.pro_addr1, \r\n                          base.pro_id1, base.pro_tel1, base.pro_" +
                "man2, base.pro_addr2, base.pro_id2, \r\n                          base.pro_tel2, b" +
                "ase.army_type, base.n_Nobr, base.nobr_b, base.province, \r\n                      " +
                "    base.born_addr, base.taxcnt, base.key_man, base.key_date, base.id_type, \r\n  " +
                "                        base.taxno, base.nolateamt, base.pretax, base.IN_JOB, ba" +
                "se.TAXMAST, \r\n                          base.COUNT_PA, base.BASCD, base.CHOLD_NO" +
                "BR, base.mark, \r\n                          base.an_mang, base.email\r\nFROM       " +
                "      base INNER JOIN\r\n                          basetts ON base.Nobr = basetts." +
                "Nobr\r\nWHERE         (GETDATE() BETWEEN basetts.adate AND basetts.ddate) AND \r\n  " +
                "                        (basetts.ttscode IN (\'1\', \'4\', \'6\')) AND (basetts.indt <" +
                "= GETDATE()) AND \r\n                          (basetts.dept IN\r\n                 " +
                "             (SELECT         d_no\r\n                                FROM         " +
                "     dept)) AND (basetts.job IN\r\n                              (SELECT         j" +
                "ob\r\n                                FROM              job)) AND (base.Nobr IN\r\n " +
                "                             (SELECT         Nobr\r\n                             " +
                "   FROM              base AS BASE_1))\r\nORDER BY  base.Nobr";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.BASEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.BASEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.BASEDataTable dataTable = new OrgImportDS.BASEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DeptTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeptTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Dept";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("idParent", "idParent");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("path", "path");
            tableMapping.ColumnMappings.Add("DeptLevel_id", "DeptLevel_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Dept] WHERE (([id] = @Original_id) AND ((@IsNull_idParent = 1 AND [idParent] IS NULL) OR ([idParent] = @Original_idParent)) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_path = 1 AND [path] IS NULL) OR ([path] = @Original_path)) AND ((@IsNull_DeptLevel_id = 1 AND [DeptLevel_id] IS NULL) OR ([DeptLevel_id] = @Original_DeptLevel_id)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_idParent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_path", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_path", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DeptLevel_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptLevel_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeptLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptLevel_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Dept] ([id], [idParent], [name], [path], [DeptLevel_id]) VALUES (@id" +
                ", @idParent, @name, @path, @DeptLevel_id);\r\nSELECT id, idParent, name, path, Dep" +
                "tLevel_id FROM Dept WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@path", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeptLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptLevel_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Dept] SET [id] = @id, [idParent] = @idParent, [name] = @name, [path] = @path, [DeptLevel_id] = @DeptLevel_id WHERE (([id] = @Original_id) AND ((@IsNull_idParent = 1 AND [idParent] IS NULL) OR ([idParent] = @Original_idParent)) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_path = 1 AND [path] IS NULL) OR ([path] = @Original_path)) AND ((@IsNull_DeptLevel_id = 1 AND [DeptLevel_id] IS NULL) OR ([DeptLevel_id] = @Original_DeptLevel_id)));
SELECT id, idParent, name, path, DeptLevel_id FROM Dept WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@path", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeptLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptLevel_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_idParent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_path", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_path", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "path", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DeptLevel_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptLevel_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeptLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptLevel_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.ezFlowHungTaiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         Dept.*\r\nFROM             Dept";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT         id, idParent, name, path, DeptLevel_id\r\nFROM             Dept\r\nWHE" +
                "RE         (idParent = @idParent)\r\nORDER BY  id";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@idParent", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.DeptDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.DeptDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.DeptDataTable dataTable = new OrgImportDS.DeptDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByParent(OrgImportDS.DeptDataTable dataTable, string idParent) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((idParent == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(idParent));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual OrgImportDS.DeptDataTable GetDataByParent(string idParent) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((idParent == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(idParent));
            }
            OrgImportDS.DeptDataTable dataTable = new OrgImportDS.DeptDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS.DeptDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS dataSet) {
            return this.Adapter.Update(dataSet, "Dept");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_id, string Original_idParent, string Original_name, string Original_path, string Original_DeptLevel_id) {
            if ((Original_id == null)) {
                throw new System.ArgumentNullException("Original_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_id));
            }
            if ((Original_idParent == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_idParent));
            }
            if ((Original_name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_name));
            }
            if ((Original_path == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_path));
            }
            if ((Original_DeptLevel_id == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DeptLevel_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string id, string idParent, string name, string path, string DeptLevel_id) {
            if ((id == null)) {
                throw new System.ArgumentNullException("id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(id));
            }
            if ((idParent == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(idParent));
            }
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(name));
            }
            if ((path == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(path));
            }
            if ((DeptLevel_id == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DeptLevel_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string id, string idParent, string name, string path, string DeptLevel_id, string Original_id, string Original_idParent, string Original_name, string Original_path, string Original_DeptLevel_id) {
            if ((id == null)) {
                throw new System.ArgumentNullException("id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(id));
            }
            if ((idParent == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(idParent));
            }
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(name));
            }
            if ((path == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(path));
            }
            if ((DeptLevel_id == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DeptLevel_id));
            }
            if ((Original_id == null)) {
                throw new System.ArgumentNullException("Original_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_id));
            }
            if ((Original_idParent == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_idParent));
            }
            if ((Original_name == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_name));
            }
            if ((Original_path == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_path));
            }
            if ((Original_DeptLevel_id == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_DeptLevel_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PosTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PosTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Pos";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("PosLevel_id", "PosLevel_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Pos] WHERE (([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] " +
                "IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_PosLevel_id = 1 AND [PosLev" +
                "el_id] IS NULL) OR ([PosLevel_id] = @Original_PosLevel_id)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PosLevel_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PosLevel_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PosLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PosLevel_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Pos] ([id], [name], [PosLevel_id]) VALUES (@id, @name, @PosLevel_id)" +
                ";\r\nSELECT id, name, PosLevel_id FROM Pos WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PosLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PosLevel_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Pos] SET [id] = @id, [name] = @name, [PosLevel_id] = @PosLevel_id WHERE (([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_PosLevel_id = 1 AND [PosLevel_id] IS NULL) OR ([PosLevel_id] = @Original_PosLevel_id)));
SELECT id, name, PosLevel_id FROM Pos WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PosLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PosLevel_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PosLevel_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PosLevel_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PosLevel_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PosLevel_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.ezFlowHungTaiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         Pos.*\r\nFROM             Pos";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.PosDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.PosDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.PosDataTable dataTable = new OrgImportDS.PosDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS.PosDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS dataSet) {
            return this.Adapter.Update(dataSet, "Pos");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_id, string Original_name, string Original_PosLevel_id) {
            if ((Original_id == null)) {
                throw new System.ArgumentNullException("Original_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_id));
            }
            if ((Original_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_name));
            }
            if ((Original_PosLevel_id == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_PosLevel_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string id, string name, string PosLevel_id) {
            if ((id == null)) {
                throw new System.ArgumentNullException("id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(id));
            }
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            if ((PosLevel_id == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PosLevel_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string id, string name, string PosLevel_id, string Original_id, string Original_name, string Original_PosLevel_id) {
            if ((id == null)) {
                throw new System.ArgumentNullException("id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(id));
            }
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            if ((PosLevel_id == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PosLevel_id));
            }
            if ((Original_id == null)) {
                throw new System.ArgumentNullException("Original_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_id));
            }
            if ((Original_name == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_name));
            }
            if ((Original_PosLevel_id == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PosLevel_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmpTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Emp";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("pw", "pw");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("isNeedAgent", "isNeedAgent");
            tableMapping.ColumnMappings.Add("dateB", "dateB");
            tableMapping.ColumnMappings.Add("dateE", "dateE");
            tableMapping.ColumnMappings.Add("email", "email");
            tableMapping.ColumnMappings.Add("login", "login");
            tableMapping.ColumnMappings.Add("sex", "sex");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Emp] WHERE (([id] = @Original_id) AND ((@IsNull_pw = 1 AND [pw] IS NULL) OR ([pw] = @Original_pw)) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_isNeedAgent = 1 AND [isNeedAgent] IS NULL) OR ([isNeedAgent] = @Original_isNeedAgent)) AND ((@IsNull_dateB = 1 AND [dateB] IS NULL) OR ([dateB] = @Original_dateB)) AND ((@IsNull_dateE = 1 AND [dateE] IS NULL) OR ([dateE] = @Original_dateE)) AND ((@IsNull_email = 1 AND [email] IS NULL) OR ([email] = @Original_email)) AND ((@IsNull_login = 1 AND [login] IS NULL) OR ([login] = @Original_login)) AND ((@IsNull_sex = 1 AND [sex] IS NULL) OR ([sex] = @Original_sex)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pw", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pw", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pw", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pw", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_isNeedAgent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "isNeedAgent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_isNeedAgent", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isNeedAgent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateB", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_email", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_email", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_login", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "login", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_login", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "login", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_sex", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sex", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_sex", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sex", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Emp] ([id], [pw], [name], [isNeedAgent], [dateB], [dateE], [email], [login], [sex]) VALUES (@id, @pw, @name, @isNeedAgent, @dateB, @dateE, @email, @login, @sex);
SELECT id, pw, name, isNeedAgent, dateB, dateE, email, login, sex FROM Emp WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pw", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pw", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@isNeedAgent", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isNeedAgent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@login", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "login", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sex", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Emp] SET [id] = @id, [pw] = @pw, [name] = @name, [isNeedAgent] = @isNeedAgent, [dateB] = @dateB, [dateE] = @dateE, [email] = @email, [login] = @login, [sex] = @sex WHERE (([id] = @Original_id) AND ((@IsNull_pw = 1 AND [pw] IS NULL) OR ([pw] = @Original_pw)) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_isNeedAgent = 1 AND [isNeedAgent] IS NULL) OR ([isNeedAgent] = @Original_isNeedAgent)) AND ((@IsNull_dateB = 1 AND [dateB] IS NULL) OR ([dateB] = @Original_dateB)) AND ((@IsNull_dateE = 1 AND [dateE] IS NULL) OR ([dateE] = @Original_dateE)) AND ((@IsNull_email = 1 AND [email] IS NULL) OR ([email] = @Original_email)) AND ((@IsNull_login = 1 AND [login] IS NULL) OR ([login] = @Original_login)) AND ((@IsNull_sex = 1 AND [sex] IS NULL) OR ([sex] = @Original_sex)));
SELECT id, pw, name, isNeedAgent, dateB, dateE, email, login, sex FROM Emp WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pw", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pw", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@isNeedAgent", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isNeedAgent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@login", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "login", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sex", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pw", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pw", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pw", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pw", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_isNeedAgent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "isNeedAgent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_isNeedAgent", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isNeedAgent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateB", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_email", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_email", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_login", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "login", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_login", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "login", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_sex", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sex", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_sex", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sex", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.ezFlowHungTaiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         Emp.*\r\nFROM             Emp";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.EmpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.EmpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.EmpDataTable dataTable = new OrgImportDS.EmpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS.EmpDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS dataSet) {
            return this.Adapter.Update(dataSet, "Emp");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_id, string Original_pw, string Original_name, System.Nullable<bool> Original_isNeedAgent, System.Nullable<System.DateTime> Original_dateB, System.Nullable<System.DateTime> Original_dateE, string Original_email, string Original_login, string Original_sex) {
            if ((Original_id == null)) {
                throw new System.ArgumentNullException("Original_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_id));
            }
            if ((Original_pw == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_pw));
            }
            if ((Original_name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_name));
            }
            if ((Original_isNeedAgent.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_isNeedAgent.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_dateB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_dateB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_dateE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_dateE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_email == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_email));
            }
            if ((Original_login == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_login));
            }
            if ((Original_sex == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_sex));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string id, string pw, string name, System.Nullable<bool> isNeedAgent, System.Nullable<System.DateTime> dateB, System.Nullable<System.DateTime> dateE, string email, string login, string sex) {
            if ((id == null)) {
                throw new System.ArgumentNullException("id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(id));
            }
            if ((pw == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(pw));
            }
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(name));
            }
            if ((isNeedAgent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(isNeedAgent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((dateB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(dateB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((dateE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(dateE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((email == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(email));
            }
            if ((login == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(login));
            }
            if ((sex == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(sex));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string id, 
                    string pw, 
                    string name, 
                    System.Nullable<bool> isNeedAgent, 
                    System.Nullable<System.DateTime> dateB, 
                    System.Nullable<System.DateTime> dateE, 
                    string email, 
                    string login, 
                    string sex, 
                    string Original_id, 
                    string Original_pw, 
                    string Original_name, 
                    System.Nullable<bool> Original_isNeedAgent, 
                    System.Nullable<System.DateTime> Original_dateB, 
                    System.Nullable<System.DateTime> Original_dateE, 
                    string Original_email, 
                    string Original_login, 
                    string Original_sex) {
            if ((id == null)) {
                throw new System.ArgumentNullException("id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(id));
            }
            if ((pw == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(pw));
            }
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(name));
            }
            if ((isNeedAgent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(isNeedAgent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((dateB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(dateB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((dateE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(dateE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((email == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(email));
            }
            if ((login == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(login));
            }
            if ((sex == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(sex));
            }
            if ((Original_id == null)) {
                throw new System.ArgumentNullException("Original_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_id));
            }
            if ((Original_pw == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_pw));
            }
            if ((Original_name == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_name));
            }
            if ((Original_isNeedAgent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_isNeedAgent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_dateB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_dateB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Original_dateE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(Original_dateE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_email == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_email));
            }
            if ((Original_login == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_login));
            }
            if ((Original_sex == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_sex));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RoleTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RoleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Role";
            tableMapping.ColumnMappings.Add("auto", "auto");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("idParent", "idParent");
            tableMapping.ColumnMappings.Add("Dept_id", "Dept_id");
            tableMapping.ColumnMappings.Add("Pos_id", "Pos_id");
            tableMapping.ColumnMappings.Add("dateB", "dateB");
            tableMapping.ColumnMappings.Add("dateE", "dateE");
            tableMapping.ColumnMappings.Add("Emp_id", "Emp_id");
            tableMapping.ColumnMappings.Add("mgDefault", "mgDefault");
            tableMapping.ColumnMappings.Add("deptMg", "deptMg");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Role] WHERE (([auto] = @Original_auto) AND ((@IsNull_id = 1 AND [id] IS NULL) OR ([id] = @Original_id)) AND ((@IsNull_idParent = 1 AND [idParent] IS NULL) OR ([idParent] = @Original_idParent)) AND ((@IsNull_Dept_id = 1 AND [Dept_id] IS NULL) OR ([Dept_id] = @Original_Dept_id)) AND ((@IsNull_Pos_id = 1 AND [Pos_id] IS NULL) OR ([Pos_id] = @Original_Pos_id)) AND ((@IsNull_dateB = 1 AND [dateB] IS NULL) OR ([dateB] = @Original_dateB)) AND ((@IsNull_dateE = 1 AND [dateE] IS NULL) OR ([dateE] = @Original_dateE)) AND ((@IsNull_Emp_id = 1 AND [Emp_id] IS NULL) OR ([Emp_id] = @Original_Emp_id)) AND ((@IsNull_mgDefault = 1 AND [mgDefault] IS NULL) OR ([mgDefault] = @Original_mgDefault)) AND ((@IsNull_deptMg = 1 AND [deptMg] IS NULL) OR ([deptMg] = @Original_deptMg)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_auto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "auto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_idParent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Dept_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Dept_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Pos_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Pos_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateB", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Emp_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Emp_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_mgDefault", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "mgDefault", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_mgDefault", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "mgDefault", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_deptMg", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "deptMg", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_deptMg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "deptMg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Role] ([id], [idParent], [Dept_id], [Pos_id], [dateB], [dateE], [Emp_id], [mgDefault], [deptMg]) VALUES (@id, @idParent, @Dept_id, @Pos_id, @dateB, @dateE, @Emp_id, @mgDefault, @deptMg);
SELECT auto, id, idParent, Dept_id, Pos_id, dateB, dateE, Emp_id, mgDefault, deptMg FROM Role WHERE (auto = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Dept_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Pos_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Emp_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mgDefault", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "mgDefault", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@deptMg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "deptMg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Role] SET [id] = @id, [idParent] = @idParent, [Dept_id] = @Dept_id, [Pos_id] = @Pos_id, [dateB] = @dateB, [dateE] = @dateE, [Emp_id] = @Emp_id, [mgDefault] = @mgDefault, [deptMg] = @deptMg WHERE (([auto] = @Original_auto) AND ((@IsNull_id = 1 AND [id] IS NULL) OR ([id] = @Original_id)) AND ((@IsNull_idParent = 1 AND [idParent] IS NULL) OR ([idParent] = @Original_idParent)) AND ((@IsNull_Dept_id = 1 AND [Dept_id] IS NULL) OR ([Dept_id] = @Original_Dept_id)) AND ((@IsNull_Pos_id = 1 AND [Pos_id] IS NULL) OR ([Pos_id] = @Original_Pos_id)) AND ((@IsNull_dateB = 1 AND [dateB] IS NULL) OR ([dateB] = @Original_dateB)) AND ((@IsNull_dateE = 1 AND [dateE] IS NULL) OR ([dateE] = @Original_dateE)) AND ((@IsNull_Emp_id = 1 AND [Emp_id] IS NULL) OR ([Emp_id] = @Original_Emp_id)) AND ((@IsNull_mgDefault = 1 AND [mgDefault] IS NULL) OR ([mgDefault] = @Original_mgDefault)) AND ((@IsNull_deptMg = 1 AND [deptMg] IS NULL) OR ([deptMg] = @Original_deptMg)));
SELECT auto, id, idParent, Dept_id, Pos_id, dateB, dateE, Emp_id, mgDefault, deptMg FROM Role WHERE (auto = @auto)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Dept_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Pos_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Emp_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mgDefault", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "mgDefault", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@deptMg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "deptMg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_auto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "auto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_idParent", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idParent", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "idParent", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Dept_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Dept_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Pos_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Pos_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateB", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateB", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Emp_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Emp_id", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_mgDefault", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "mgDefault", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_mgDefault", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "mgDefault", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_deptMg", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "deptMg", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_deptMg", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "deptMg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@auto", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "auto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OrgImport.Properties.Settings.Default.ezFlowHungTaiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT         Role.*\r\nFROM             Role";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Dept_id, Emp_id, Pos_id, auto, dateB, dateE, deptMg, id, idParent, mgDefau" +
                "lt FROM Role WHERE (Dept_id = @Dept_id) AND (Emp_id <> @Emp_id)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Dept_id", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Emp_id", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT Dept_id, Emp_id, Pos_id, auto, dateB, dateE, deptMg, id, idParent, mgDefau" +
                "lt FROM Role WHERE (Dept_id = @Dept_id) AND (Pos_id = @Pos_id) AND (Emp_id = @Em" +
                "p_id)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Dept_id", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Dept_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Pos_id", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Pos_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Emp_id", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Emp_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE        Role\r\nSET                  idParent = \'\'\r\nWHERE         (id = idPar" +
                "ent); \r\n";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OrgImportDS.RoleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OrgImportDS.RoleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OrgImportDS.RoleDataTable dataTable = new OrgImportDS.RoleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByNoDeptMaster(OrgImportDS.RoleDataTable dataTable, string Dept_id, string Emp_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Dept_id == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Dept_id));
            }
            if ((Emp_id == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Emp_id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual OrgImportDS.RoleDataTable GetDataByNoDeptMaster(string Dept_id, string Emp_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Dept_id == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Dept_id));
            }
            if ((Emp_id == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Emp_id));
            }
            OrgImportDS.RoleDataTable dataTable = new OrgImportDS.RoleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByOne(OrgImportDS.RoleDataTable dataTable, string Dept_id, string Pos_id, string Emp_id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Dept_id == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Dept_id));
            }
            if ((Pos_id == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Pos_id));
            }
            if ((Emp_id == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Emp_id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual OrgImportDS.RoleDataTable GetDataByOne(string Dept_id, string Pos_id, string Emp_id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Dept_id == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Dept_id));
            }
            if ((Pos_id == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Pos_id));
            }
            if ((Emp_id == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Emp_id));
            }
            OrgImportDS.RoleDataTable dataTable = new OrgImportDS.RoleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS.RoleDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OrgImportDS dataSet) {
            return this.Adapter.Update(dataSet, "Role");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_auto, string Original_id, string Original_idParent, string Original_Dept_id, string Original_Pos_id, System.Nullable<System.DateTime> Original_dateB, System.Nullable<System.DateTime> Original_dateE, string Original_Emp_id, System.Nullable<bool> Original_mgDefault, System.Nullable<bool> Original_deptMg) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_auto));
            if ((Original_id == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_id));
            }
            if ((Original_idParent == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_idParent));
            }
            if ((Original_Dept_id == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Dept_id));
            }
            if ((Original_Pos_id == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Pos_id));
            }
            if ((Original_dateB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_dateB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_dateE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_dateE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_Emp_id == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Emp_id));
            }
            if ((Original_mgDefault.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_mgDefault.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_deptMg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((bool)(Original_deptMg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string id, string idParent, string Dept_id, string Pos_id, System.Nullable<System.DateTime> dateB, System.Nullable<System.DateTime> dateE, string Emp_id, System.Nullable<bool> mgDefault, System.Nullable<bool> deptMg) {
            if ((id == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(id));
            }
            if ((idParent == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(idParent));
            }
            if ((Dept_id == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Dept_id));
            }
            if ((Pos_id == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Pos_id));
            }
            if ((dateB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(dateB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((dateE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(dateE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Emp_id == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Emp_id));
            }
            if ((mgDefault.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(mgDefault.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((deptMg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(deptMg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string id, 
                    string idParent, 
                    string Dept_id, 
                    string Pos_id, 
                    System.Nullable<System.DateTime> dateB, 
                    System.Nullable<System.DateTime> dateE, 
                    string Emp_id, 
                    System.Nullable<bool> mgDefault, 
                    System.Nullable<bool> deptMg, 
                    int Original_auto, 
                    string Original_id, 
                    string Original_idParent, 
                    string Original_Dept_id, 
                    string Original_Pos_id, 
                    System.Nullable<System.DateTime> Original_dateB, 
                    System.Nullable<System.DateTime> Original_dateE, 
                    string Original_Emp_id, 
                    System.Nullable<bool> Original_mgDefault, 
                    System.Nullable<bool> Original_deptMg, 
                    int auto) {
            if ((id == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(id));
            }
            if ((idParent == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(idParent));
            }
            if ((Dept_id == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Dept_id));
            }
            if ((Pos_id == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Pos_id));
            }
            if ((dateB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(dateB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((dateE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(dateE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Emp_id == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Emp_id));
            }
            if ((mgDefault.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(mgDefault.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((deptMg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(deptMg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_auto));
            if ((Original_id == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_id));
            }
            if ((Original_idParent == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_idParent));
            }
            if ((Original_Dept_id == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Dept_id));
            }
            if ((Original_Pos_id == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Pos_id));
            }
            if ((Original_dateB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(Original_dateB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_dateE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_dateE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((Original_Emp_id == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Emp_id));
            }
            if ((Original_mgDefault.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_mgDefault.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            if ((Original_deptMg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(Original_deptMg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(auto));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int FixUpdate() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591